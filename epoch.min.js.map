{"version":3,"sources":["epoch.js"],"names":["exports","Epoch","format","lang","this","_d","Date","parse","_lang","epoch","prototype","str","length","Error","f","_format","self","rx","replace","$0","$1","$2","$3","ordinal","call","date","test","d","getHours","getMinutes","getSeconds","join","from","diff","rel","pre","suf","interval","unit","Math","floor","seconds","abs","year","month","day","hour","minute","less","a","A","dd","ddd","dddd","D","DD","DDD","doy","ceil","h","H","hh","HH","m","min","mm","M","MM","MMM","mon","MMMM","s","sec","ss","u","milli","U","round","time","ww","YYYY","YY","toString","substr","Z","z","getTimezoneOffset","sign","slice","ZZ","ZZZ","match","timestamp","leap","leapYear","y","rfc2822","rfc1123","toUTCString","rfc8601","iso8601","sqldate","sqltime","datetime","num","_set","val","set","get","exec","parseInt","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","getMilliseconds","setMonth","getMonth","setFullYear","getFullYear","getDay","getTime","en-us","window","module"],"mappings":"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","file":"epoch.min.js","sourcesContent":["(function (exports) {\n\"use strict\";\n\n// constructor wrapper\nexports.epoch = function epoch( format, lang ) {\n\tlang = lang || 'en-us';\n\n\treturn new Epoch( format, lang );\n};\n\n\n// constructor\nfunction Epoch( format, lang ) {\n\tthis._d = ( format ? new Date( this.parse( format ) ) : new Date() );\n\tthis.lang = this._lang[lang];\n}\n\n\n/**\n * Break a format down into componenets and execute their formatting fn\n */\n\nEpoch.prototype.format = function format( str ) {\n\tif( str.length === 0 ) {\n\t\tthrow new Error('No format specified');\n\t}\n\n\tvar f = this._format,\n\t\tself = this,\n\t\t// regex breakdown:\n\t\t// (it's about perfect, so modify with extreme caution)\n\t\t// * looks for text surrounded by brackets \"[]\",\n\t\t// * OR \"|\"\n\t\t// * looks for repeating occurences of a character (or just one),\n\t\t// * possibly followed by one \"o\" (ordinal suffix)\n\t\trx = /\\[([^\\[]*)\\]|(\\w)\\2*(o)?/g;\n\n\t// $0 is format received\n\t// $1 is value of escaped text, if used\n\t// $2 is repeating format token\n\t// $3 is \"o\" if ordinal suffix is to be used\n\treturn str.replace( rx, function( $0, $1, $2, $3 ) {\n\t\t// $1 will only be defined if escaped text was found\n\n\t\tif( typeof $1 === \"undefined\" ) {\n\t\t\tif( typeof f[$0] !== \"function\" && typeof $3 === \"undefined\" ) {\n\t\t\t\tthrow new Error(\"Invalid format: \" + $0);\n\t\t\t}\n\n\t\t\t// check for ordinal suffix in format\n\t\t\t// ($3 would be undefined if $0 was escaped text)\n\t\t\treturn ( $3 === \"o\"\n\t\t\t\t? self.ordinal.call( self, f[$0.replace( \"o\", \"\" )].call(self) )\n\t\t\t\t: f[$0].call(self)\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn $1 || $0;\n\t\t}\n\t} );\n};\n\n\n/**\n * Attempt to accept unpredictable date formats and make them parsable\n */\n\nEpoch.prototype.parse = function parse( date ) {\n\t// possible additional date parser\n\t// /\\b(?:(?:Mon)|(?:Tues?)|(?:Wed(?:nes)?)|(?:Thur?s?)|(?:Fri)|(?:Sat(?:ur)?)|(?:Sun))(?:day)?\\b[:\\-,]?\\s*[a-zA-Z]{3,9}\\s+\\d{1,2}\\s*,?\\s*\\d{4}/i;\n\n\t// standard YYYY-MM-DD format, with common separators\n\tif( /^\\d{4}[.,-_]\\d{2}[.,-_]\\d{2}\\s*$/.test( date ) ){\n\t\tvar d = new Date();\n\t\tdate += ' ' + [ d.getHours(), d.getMinutes(), d.getSeconds() ].join(':');\n\t}\n\n\treturn date;\n};\n\n\nEpoch.prototype.from = Epoch.prototype.diff = function from( date, rel ) {\n\trel = rel || { pre: this.lang.from.pre, suf: this.lang.from.suf };\n\tdate = ( date ? new Date( this.parse( date ) ) : new Date() );\n\n\tvar interval = '',\n\t\tunit = '',\n\t\tdiff = Math.floor( ( date - this._d ) / 1000 ),\n\t\tseconds = Math.abs( diff );\n\n\tif( seconds >= 31536000 || Math.floor( seconds / 2592000 ) === 12 ) {\n\t\tinterval = Math.floor( seconds / 31536000 ) || 1;\n\t\tunit = this.lang.from.year;\n\t}\n\n\t// just average it out to 30 days\n\telse if( seconds >= 2592000 ) {\n\t\tinterval = Math.floor( seconds / 2592000 );\n\t\tunit = this.lang.from.month;\n\t}\n\n\telse if( seconds >= 86400 ) {\n\t\tinterval = Math.floor( seconds / 86400 );\n\t\tunit = this.lang.from.day;\n\t}\n\n\telse if( seconds >= 3600 ) {\n\t\tinterval = Math.floor( seconds / 3600 );\n\t\tunit = this.lang.from.hour;\n\t}\n\n\telse if( seconds >= 60 ) {\n\t\tinterval = Math.floor( seconds / 60 );\n\t\tunit = this.lang.from.minute;\n\t}\n\n\telse {\n\t\tinterval = this.lang.from.less;\n\t\tunit = this.lang.from.minute;\n\t}\n\n\t// singulural\n\tif( typeof interval === 'number' && interval > 1 )\n\t\tunit += 's'\n\n\tinterval = interval + ' ' + unit;\n\n\treturn ( diff > 0 ? rel.pre + ' ' + interval : interval + ' ' + rel.suf );\n};\n\n\n// collection of functions to return date formats\nEpoch.prototype._format = {\n\n\t// Lowercase am/pm\n\ta: function a() {\n\t\treturn ( this.hour() > 11 ? 'pm' : 'am' );\n\t},\n\n\t// Uppercase AM/PM\n\tA: function A() {\n\t\treturn ( this.hour() > 11 ? 'PM' : 'AM' );\n\t},\n\n\t// Numeric representation of the day of the week, 0 - 6 : Sun - Sat\n\td: function d() {\n\t\treturn this.day();\n\t},\n\n\t// Numeric representation of the day of the week, 1 - 7 : Sun - Sat\n\tdd: function dd() {\n\t\treturn this.day() + 1;\n\t},\n\n\t// A textual representation of a day, three letters\n\tddd: function ddd() {\n\t\treturn this.lang.d[ this.day() ];\n\t},\n\n\t// A full textual representation of the day of the week\n\tdddd: function dddd() {\n\t\treturn this.lang.day[ this.day() ]\n\t},\n\n\t// Day of the month without leading zeros\n\tD: function D() {\n\t\treturn this.date();\n\t},\n\n\t// Day of the month with leading zeros\n\tDD: function DD() {\n\t\tvar d = this.date();\n\t\treturn ( d < 10 ? '0' + d : d );\n\t},\n\n\t// The day of the year (starting from 0)\n\tDDD: function DDD() {\n\t\tvar doy = new Date( this.year(), 0, 0 );\n\t\treturn Math.ceil( ( this._d - doy ) / 86400000 );\n\t},\n\n\t// The day of the year (starting from 0)\n\t// DDDD: function() {\n\t// \tvar doy = new Date( this.year(), 0, 0 );\n\t// \treturn Math.ceil( ( this._d - doy ) / 86400000 );\n\t// },\n\n\t// 24-hour format of an hour without leading zeros\n\th: function h() {\n\t\treturn this.hour();\n\t},\n\n\t// 12-hour format of an hour without leading zeros\n\tH: function H() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : h );\n\t},\n\n\t// 24-hour format of an hour with leading zeros\n\thh: function hh() {\n\t\tvar hh = this.hour();\n\t\treturn ( hh < 10 ? '0' + hh : hh );\n\t},\n\n\t// 12-hour format of an hour with leading zeros\n\tHH: function HH() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : ( h < 10 ? '0' + h : h ) );\n\t},\n\n\t// Minutes without leading zeros\n\tm: function m() {\n\t\treturn this.min();\n\t},\n\n\t// Minutes with leading zeros\n\tmm: function mm() {\n\t\tvar mm = this.min();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// Numeric representation of a month, without leading zeros\n\tM: function M() {\n\t\treturn this.month();\n\t},\n\n\t// Numeric representation of a month, with leading zeros\n\tMM: function MM() {\n\t\tvar mm = this.month();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// A short textual representation of a month, three letters\n\tMMM: function MMM() {\n\t\t// textual representations should be abstracted into\n\t\t// pluggable language files\n\t\treturn this.lang.mon[ this.month() - 1 ];\n\t},\n\n\t// A full textual representation of a month, such as January or March\n\tMMMM: function MMMM() {\n\t\treturn this.lang.month[ this.month() - 1 ];\n\t},\n\n\t// Seconds, without leading zeros\n\ts: function s() {\n\t\treturn this.sec();\n\t},\n\n\t// Seconds, with leading zeros\n\tss: function ss() {\n\t\tvar ss = this.sec();\n\t\treturn ( ss < 10 ? '0' + ss : ss );\n\t},\n\n\t// Milliseconds\n\tu: function u() {\n\t\treturn this.milli();\n\t},\n\n\t// Unix timestamp\n\tU: function U() {\n\t\treturn Math.round( this.time() / 1000 );\n\t},\n\n\t// ISO-8601 week number of year, weeks starting on Monday\n\tww: function ww() {\n\t\tvar d = new Date( this.year(), 0, 1 );\n\t\td = Math.ceil( ( this._d - d ) / 86400000 );\n\t\td += this.date();\n\t\td -= this.day() + 10;\n\t\treturn Math.floor( d / 7 );\n\t},\n\n\t// A full numeric representation of a year, 4 digits\n\tYYYY: function YYYY() {\n\t\treturn this.year();\n\t},\n\n\t// A two digit representation of a year\n\tYY: function YY() {\n\t\treturn this.year().toString().substr(-2);\n\t},\n\n\t// 4 digit timezone offset with sign, ex: +/-0000\n\tZ: function Z() {\n\t\tvar z = -( this._d.getTimezoneOffset() / .6 );\n\t\tvar sign = ( z >= 0 ? '+' : '-' );\n\t\treturn sign + ( '0000' + Math.abs(z) ).slice(-4);\n\t},\n\n\tZZ: function ZZ() {\n\t\tvar z = this._format.Z.call(this);\n\t\treturn [ z.slice(0,3), z.slice(3,5) ].join(':');\n\t},\n\n\t// 3 letter time zone abbrev\n\tZZZ: function ZZZ() {\n\t\treturn this._d.toString().match(/\\((\\w*)\\)/)[1];\n\t}\n};\n\n\n// unix timestamp\nEpoch.prototype.timestamp = function timestamp() {\n\treturn Math.round( this.time() / 1000 );\n};\n\n\n// true/false if year is leap year\nEpoch.prototype.leap = Epoch.prototype.leapYear = function leapYear() {\n\tvar y = this.year();\n\treturn ( ( y % 4 === 0 ) && ( y % 100 !== 0 ) ) || ( y % 400 === 0 );\n};\n\n\n// 1123 and 2822 are the same format\nEpoch.prototype.rfc2822 = Epoch.prototype.rfc1123 = function rfc1123_rfc2822() {\n\treturn this._d.toUTCString();\n};\n\nEpoch.prototype.rfc8601 = Epoch.prototype.iso8601 = function iso8601() {\n\treturn this.format('YYYY-MM-DD[T]hh:mm:ss[+0000]');\n};\n\n// format accepted by SQL DATE column type\nEpoch.prototype.sqldate = function sqldate() {\n\treturn this.format('YYYY-MM-DD');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqltime = function sqltime() {\n\treturn this.format('hh:mm:ss');\n};\n\n// format accepted by SQL DATETIME column type\nEpoch.prototype.datetime = function datetime() {\n\treturn this.format('YYYY-MM-DD hh:mm:ss');\n};\n\n// return number + ordinal suffix for num\nEpoch.prototype.ordinal = function ordinal( num ) {\n\tif( num >= 11 && num <= 13 )\n\t\tnum += \"th\";\n\n\telse {\n\t\tswitch( num % 10 ) {\n\t\t\tcase 1:  num += \"st\"; break;\n\t\t\tcase 2:  num += \"nd\"; break;\n\t\t\tcase 3:  num += \"rd\"; break;\n\t\t\tdefault: num += \"th\"; break;\n\t\t}\n\t}\n\n\treturn num;\n};\n\n\n/**\n * WRAPPER SECTION *******************************************************\n * here be lizards... changing below this line could break things, careful\n */\n\n\nEpoch.prototype._set = function( val, set, get ) {\n\t// if val is a string preceeded by \"+\" or \"-\", get the current value,\n\t// parse str to int (making it positive or negative) and add to current val\n\t// else if val is an int (or stringified int), then just set new value\n\tset.call( this._d, ( /(\\+|-)\\d/g.exec( val )\n\t\t? get.call( this._d ) + parseInt( val )\n\t\t: val ) );\n};\n\nEpoch.prototype.date = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setDate, this._d.getDate );\n\t}\n\n\treturn this._d.getDate();\n};\n\nEpoch.prototype.hour = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setHours, this._d.getHours );\n\t}\n\n\treturn this._d.getHours();\n};\n\nEpoch.prototype.min = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setMinutes, this._d.getMinutes );\n\t}\n\n\treturn this._d.getMinutes();\n};\n\nEpoch.prototype.sec = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setSeconds, this._d.getSeconds );\n\t}\n\n\treturn this._d.getSeconds();\n};\n\nEpoch.prototype.milli = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setMilliseconds, this._d.getMilliseconds );\n\t}\n\n\treturn this._d.getMilliseconds();\n};\n\nEpoch.prototype.month = function( val ) {\n\tif( val ) {\n\t\tif( ! /(\\+|-)/g.exec( val ) )\n\t\t\tval = parseInt(val) - 1;\n\t\tthis._set( val, this._d.setMonth, this._d.getMonth );\n\t}\n\n\t// js returns jan = 0, dec = 11... don't know why\n\t// don't change this, this is the one true way\n\treturn this._d.getMonth() + 1;\n};\n\nEpoch.prototype.year = function( val ) {\n\tif( val ) {\n\t\tthis._set( val, this._d.setFullYear, this._d.getFullYear );\n\t}\n\n\treturn this._d.getFullYear();\n};\n\nEpoch.prototype.day = function() {\n\treturn this._d.getDay();\n};\n\nEpoch.prototype.time = function() {\n\treturn this._d.getTime();\n};\n\n\nEpoch.prototype._lang = {\n\t\"en-us\": {\n\t\tmonth: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t'August', 'September', 'October', 'November', 'December' ],\n\n\t\tmon: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t\t'Oct', 'Nov', 'Dec' ],\n\n\t\tday: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\n\t\t\t'Friday', 'Saturday' ],\n\n\t\td: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\n\t\tfrom: {\n\t\t\tpre: 'in',\n\t\t\tsuf: 'ago',\n\t\t\tminute: 'minute',\n\t\t\thour: 'hour',\n\t\t\tday: 'day',\n\t\t\tmonth: 'month',\n\t\t\tyear: 'year',\n\t\t\tless: 'less than a'\n\t\t}\n\t}\n};\n\n})( typeof window === 'undefined' ? module.exports : window );"],"sourceRoot":"/source/"}