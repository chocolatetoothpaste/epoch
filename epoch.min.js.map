{"version":3,"sources":["epoch.js"],"names":["epoch","format","lang","Epoch","Date","this","time","parse","_lang","module","exports","window","prototype","str","length","Error","f","_format","self","rx","replace","$0","$1","$2","$3","ordinal","call","date","ret","YYYYMMDDhhmmss","test","m","match","shift","index","input","parseInt","from","diff","rel","pre","suf","interval","unit","Math","floor","seconds","abs","year","month","day","hour","minute","less","a","A","d","dd","ddd","dddd","D","DD","DDD","doy","ceil","h","H","hh","HH","LL","getTime","min","mm","M","MM","MMM","mon","MMMM","s","sec","ss","u","milli","U","round","ww","YYYY","YY","toString","substr","Z","z","getTimezoneOffset","sign","slice","ZZ","join","ZZZ","timestamp","leap","leapYear","y","rfc2822","rfc1123","toUTCString","rfc8601","iso8601","sqldate","sqltime","sqleod","sqlsod","datetime","fdow","num","_set","val","set","get","exec","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","setMonth","getMonth","setFullYear","getFullYear","getDay","en-us"],"mappings":"CAAA,WACA,YAGA,SAAAA,GAAAC,EAAAC,GAGA,MAFAA,GAAAA,GAAA,QAEA,GAAAC,GAAAF,EAAAC,GAaA,QAAAC,GAAAF,EAAAC,GACAD,YAAAG,MACAC,KAAAA,UAAAJ,EAEAA,YAAAE,GACAE,KAAAA,UAAA,GAAAD,MAAAH,EAAAK,QAEAL,EACAI,KAAAA,UAAAA,KAAAE,MAAAN,GAGAI,KAAAA,UAAA,GAAAD,MAGAC,KAAAH,KAAAG,KAAAG,MAAAN,GAvBA,mBAAAO,SAAAA,OAAAC,QACAD,OAAAC,QAAAV,EAGAW,OAAAX,MAAAA,EA2BAG,EAAAS,UAAAX,OAAA,SAAAY,GACA,GAAA,IAAAA,EAAAC,OACA,KAAA,IAAAC,OAAA,sBAGA,IAAAC,GAAAX,KAAAY,QACAC,EAAAb,KAOAc,EAAA,2BAOA,OAAAN,GAAAO,QAAAD,EAAA,SAAAE,EAAAC,EAAAC,EAAAC,GAEA,GAAA,mBAAAF,GAAA,CACA,GAAA,kBAAAN,GAAAK,IAAA,mBAAAG,GACA,KAAA,IAAAT,OAAA,mBAAAM,EAKA,OAAA,MAAAG,EAGAN,EAAAO,QAAAC,KAAAR,EAAAF,EAAAK,EAAAD,QAAA,IAAA,KAAAM,KAAAR,IACAF,EAAAK,GAAAK,KAAAR,GAKA,MAAAI,IAAAD,KAUAlB,EAAAS,UAAAL,MAAA,SAAAoB,GAKA,GAAAC,GACAC,EAAA,0EACA,IAAAA,EAAAC,KAAAH,GAAA,CACA,GAAAI,GAAAJ,EAAAK,MAAAH,EACAE,GAAAE,cACAF,GAAAG,YACAH,GAAAI,MACAP,EAAA,GAAAxB,MAAA2B,EAAA,GAAAK,SAAAL,EAAA,IAAA,EAAAA,EAAA,GAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,OAGAH,GAAA,GAAAxB,MAAAuB,EAGA,OAAAC,IAIAzB,EAAAS,UAAAyB,KAAAlC,EAAAS,UAAA0B,KAAA,SAAAX,EAAAY,GACAA,EAAAA,IAAAC,IAAAnC,KAAAH,KAAAmC,KAAAG,IAAAC,IAAApC,KAAAH,KAAAmC,KAAAI,KACAd,EAAAA,EAAA,GAAAvB,MAAAC,KAAAE,MAAAoB,IAAA,GAAAvB,KAEA,IAAAsC,GAAA,GACAC,EAAA,GACAL,EAAAM,KAAAC,OAAAlB,EAAAtB,KAAAA,WAAA,KACAyC,EAAAF,KAAAG,IAAAT,EAuCA,OArCAQ,IAAA,SAAA,KAAAF,KAAAC,MAAAC,EAAA,SACAJ,EAAAE,KAAAC,MAAAC,EAAA,UAAA,EACAH,EAAAtC,KAAAH,KAAAmC,KAAAW,MAIAF,GAAA,QACAJ,EAAAE,KAAAC,MAAAC,EAAA,QACAH,EAAAtC,KAAAH,KAAAmC,KAAAY,OAGAH,GAAA,OACAJ,EAAAE,KAAAC,MAAAC,EAAA,OACAH,EAAAtC,KAAAH,KAAAmC,KAAAa,KAGAJ,GAAA,MACAJ,EAAAE,KAAAC,MAAAC,EAAA,MACAH,EAAAtC,KAAAH,KAAAmC,KAAAc,MAGAL,GAAA,IACAJ,EAAAE,KAAAC,MAAAC,EAAA,IACAH,EAAAtC,KAAAH,KAAAmC,KAAAe,SAIAV,EAAArC,KAAAH,KAAAmC,KAAAgB,KACAV,EAAAtC,KAAAH,KAAAmC,KAAAe,QAIA,gBAAAV,IAAAA,EAAA,IACAC,GAAA,KAEAD,EAAAA,EAAA,IAAAC,EAEAL,EAAA,EAAAC,EAAAC,IAAA,IAAAE,EAAAA,EAAA,IAAAH,EAAAE,KAKAtC,EAAAS,UAAAK,SAGAqC,EAAA,WACA,MAAAjD,MAAA8C,OAAA,GAAA,KAAA,MAIAI,EAAA,WACA,MAAAlD,MAAA8C,OAAA,GAAA,KAAA,MAIAK,EAAA,WACA,MAAAnD,MAAA6C,OAIAO,GAAA,WACA,MAAApD,MAAA6C,MAAA,GAIAQ,IAAA,WACA,MAAArD,MAAAH,KAAAsD,EAAAnD,KAAA6C,QAIAS,KAAA,WACA,MAAAtD,MAAAH,KAAAgD,IAAA7C,KAAA6C,QAIAU,EAAA,WACA,MAAAvD,MAAAsB,QAIAkC,GAAA,WACA,GAAAL,GAAAnD,KAAAsB,MACA,OAAA,IAAA6B,EAAA,IAAAA,EAAAA,GAIAM,IAAA,WACA,GAAAC,GAAA,GAAA3D,MAAAC,KAAA2C,OAAA,EAAA,EACA,OAAAJ,MAAAoB,MAAA3D,KAAAA,UAAA0D,GAAA,QAUAE,EAAA,WACA,MAAA5D,MAAA8C,QAIAe,EAAA,WACA,GAAAD,GAAA5D,KAAA8C,MACA,OAAAc,GAAA,GAAAA,GAAA,GAAAA,GAIAE,GAAA,QAAAA,KACA,GAAAA,GAAA9D,KAAA8C,MACA,OAAA,IAAAgB,EAAA,IAAAA,EAAAA,GAIAC,GAAA,WACA,GAAAH,GAAA5D,KAAA8C,MACA,OAAAc,GAAA,GAAAA,GAAA,GAAA,GAAAA,EAAA,IAAAA,EAAAA,GAGAI,GAAA,WACA,GAAAb,GAAAxD,EAAAK,KAAAA,UAAAiE,UAMA,OAJAd,GAAA7B,KAAA,GACA6B,EAAAP,MAAA,MACAO,EAAA7B,KAAA,GAEA6B,EAAA7B,QAIAI,EAAA,WACA,MAAA1B,MAAAkE,OAIAC,GAAA,QAAAA,KACA,GAAAA,GAAAnE,KAAAkE,KACA,OAAA,IAAAC,EAAA,IAAAA,EAAAA,GAIAC,EAAA,WACA,MAAApE,MAAA4C,SAIAyB,GAAA,WACA,GAAAF,GAAAnE,KAAA4C,OACA,OAAA,IAAAuB,EAAA,IAAAA,EAAAA,GAIAG,IAAA,WAGA,MAAAtE,MAAAH,KAAA0E,IAAAvE,KAAA4C,QAAA,IAIA4B,KAAA,WACA,MAAAxE,MAAAH,KAAA+C,MAAA5C,KAAA4C,QAAA,IAIA6B,EAAA,WACA,MAAAzE,MAAA0E,OAIAC,GAAA,QAAAA,KACA,GAAAA,GAAA3E,KAAA0E,KACA,OAAA,IAAAC,EAAA,IAAAA,EAAAA,GAIAC,EAAA,WACA,MAAA5E,MAAA6E,SAIAC,EAAA,WACA,MAAAvC,MAAAwC,MAAA/E,KAAAC,OAAA,MAIA+E,GAAA,WACA,GAAA7B,GAAA,GAAApD,MAAAC,KAAA2C,OAAA,EAAA,EAIA,OAHAQ,GAAAZ,KAAAoB,MAAA3D,KAAAA,UAAAmD,GAAA,OACAA,GAAAnD,KAAAsB,OACA6B,GAAAnD,KAAA6C,MAAA,GACAN,KAAAC,MAAAW,EAAA,IAIA8B,KAAA,WACA,MAAAjF,MAAA2C,QAIAuC,GAAA,WACA,MAAAlF,MAAA2C,OAAAwC,WAAAC,OAAA,KAIAC,EAAA,WACA,GAAAC,KAAAtF,KAAAA,UAAAuF,oBAAA,IACAC,EAAAF,GAAA,EAAA,IAAA,GACA,OAAAE,IAAA,OAAAjD,KAAAG,IAAA4C,IAAAG,MAAA,KAGAC,GAAA,WACA,GAAAJ,GAAAtF,KAAAY,QAAAyE,EAAAhE,KAAArB,KACA,QAAAsF,EAAAG,MAAA,EAAA,GAAAH,EAAAG,MAAA,EAAA,IAAAE,KAAA,MAIAC,IAAA,WACA,MAAA5F,MAAAA,UAAAmF,WAAAxD,MAAA,aAAA,KAMA7B,EAAAS,UAAAsF,UAAA,WACA,MAAAtD,MAAAwC,MAAA/E,KAAAC,OAAA,MAKAH,EAAAS,UAAAuF,KAAAhG,EAAAS,UAAAwF,SAAA,WACA,GAAAC,GAAAhG,KAAA2C,MACA,OAAAqD,GAAA,IAAA,GAAAA,EAAA,MAAA,GAAAA,EAAA,MAAA,GAKAlG,EAAAS,UAAA0F,QAAAnG,EAAAS,UAAA2F,QAAA,WACA,MAAAlG,MAAAA,UAAAmG,eAGArG,EAAAS,UAAA6F,QAAAtG,EAAAS,UAAA8F,QAAA,WACA,MAAArG,MAAAJ,OAAA,iCAIAE,EAAAS,UAAA+F,QAAA,WACA,MAAAtG,MAAAJ,OAAA,eAIAE,EAAAS,UAAAgG,QAAA,WACA,MAAAvG,MAAAJ,OAAA,aAIAE,EAAAS,UAAAiG,OAAA,WACA,MAAAxG,MAAAJ,OAAA,0BAIAE,EAAAS,UAAAkG,OAAA,WACA,MAAAzG,MAAAJ,OAAA,0BAIAE,EAAAS,UAAAmG,SAAA,WACA,MAAA1G,MAAAJ,OAAA,wBAGAE,EAAAS,UAAAoG,KAAA,WACA,GAAAxD,GAAAnD,KAAA6C,KAMA,OAJA,KAAAM,GACAnD,KAAAsB,KAAA,IAAA6B,GAGAnD,MAIAF,EAAAS,UAAAa,QAAA,SAAAwF,GACA,GAAAA,GAAA,IAAA,IAAAA,EACAA,GAAA,SAGA,QAAAA,EAAA,IACA,IAAA,GAAAA,GAAA,IAAA,MACA,KAAA,GAAAA,GAAA,IAAA,MACA,KAAA,GAAAA,GAAA,IAAA,MACA,SAAAA,GAAA,KAIA,MAAAA,IAUA9G,EAAAS,UAAAsG,KAAA,SAAAC,EAAAC,EAAAC,GAIAD,EAAA1F,KAAArB,KAAAA,UAAA,YAAAiH,KAAAH,GACAE,EAAA3F,KAAArB,KAAAA,WAAA+B,SAAA+E,GACAA,IAIAhH,EAAAS,UAAAe,KAAA,SAAAwF,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAAkH,QAAAlH,KAAAA,UAAAmH,SAGAnH,KAAAA,UAAAmH,WAGArH,EAAAS,UAAAuC,KAAA,SAAAgE,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAAoH,SAAApH,KAAAA,UAAAqH,UAGArH,KAAAA,UAAAqH,YAGAvH,EAAAS,UAAA2D,IAAA,SAAA4C,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAAsH,WAAAtH,KAAAA,UAAAuH,YAGAvH,KAAAA,UAAAuH,cAGAzH,EAAAS,UAAAmE,IAAA,SAAAoC,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAAwH,WAAAxH,KAAAA,UAAAyH,YAGAzH,KAAAA,UAAAyH,cAGA3H,EAAAS,UAAAsE,MAAA,SAAAiC,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAA0H,gBAAA1H,KAAAA,UAAA2H,iBAGA3H,KAAAA,UAAA2H,mBAGA7H,EAAAS,UAAAqC,MAAA,SAAAkE,GASA,MARA,mBAAAA,KACA,UAAAG,KAAAH,KACAA,EAAA/E,SAAA+E,GAAA,GACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAA4H,SAAA5H,KAAAA,UAAA6H,WAKA7H,KAAAA,UAAA6H,WAAA,GAGA/H,EAAAS,UAAAoC,KAAA,SAAAmE,GAKA,MAJA,mBAAAA,IACA9G,KAAA6G,KAAAC,EAAA9G,KAAAA,UAAA8H,YAAA9H,KAAAA,UAAA+H,aAGA/H,KAAAA,UAAA+H,eAGAjI,EAAAS,UAAAsC,IAAA,WACA,MAAA7C,MAAAA,UAAAgI,UAGAlI,EAAAS,UAAAN,KAAA,WACA,MAAAD,MAAAA,UAAAiE,WAIAnE,EAAAS,UAAAJ,OACA8H,SACArF,OAAA,UAAA,WAAA,QAAA,QAAA,MAAA,OAAA,OACA,SAAA,YAAA,UAAA,WAAA,YAEA2B,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MACA,MAAA,MAAA,OAEA1B,KAAA,SAAA,SAAA,UAAA,YAAA,WACA,SAAA,YAEAM,GAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEAnB,MACAG,IAAA,KACAC,IAAA,MACAW,OAAA,SACAD,KAAA,OACAD,IAAA,MACAD,MAAA,QACAD,KAAA,OACAK,KAAA","file":"epoch.min.js","sourcesContent":["(function() {\n\"use strict\";\n\n// constructor wrapper\nfunction epoch( format, lang ) {\n\tlang = lang || 'en-us';\n\n\treturn new Epoch( format, lang );\n};\n\n\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = epoch;\n}\nelse {\n\twindow.epoch = epoch;\n}\n\n\n// constructor\nfunction Epoch( format, lang ) {\n\tif( format instanceof Date ) {\n\t\tthis.native = format;\n\t}\n\telse if( format instanceof Epoch ) {\n\t\tthis.native = new Date( format.time() );\n\t}\n\telse if( format ) {\n\t\tthis.native = this.parse( format );\n\t}\n\telse {\n\t\tthis.native = new Date();\n\t}\n\n\tthis.lang = this._lang[lang];\n}\n\n\n/**\n * Break a format down into componenets and execute their formatting fn\n */\n\nEpoch.prototype.format = function format( str ) {\n\tif( str.length === 0 ) {\n\t\tthrow new Error('No format specified');\n\t}\n\n\tvar f = this._format,\n\t\tself = this,\n\t\t// regex breakdown:\n\t\t// (it's about perfect, so modify with extreme caution)\n\t\t// * looks for text surrounded by brackets \"[]\",\n\t\t// * OR \"|\"\n\t\t// * looks for repeating occurences of a character (or just one),\n\t\t// * possibly followed by one \"o\" (ordinal suffix)\n\t\trx = /\\[([^\\[]*)\\]|(\\w)\\2*(o)?/g;\n\n\t// $0 is format received\n\t// $1 is value of escaped text, only defined if escaped text was found\n\t// $2 is format token\n\t// $3 is \"o\" if ordinal suffix is to be used\n\t// return str.replace( rx, ( $0, $1, $2, $3 ) => {\n\treturn str.replace( rx, function( $0, $1, $2, $3 ) {\n\n\t\tif( typeof $1 === \"undefined\" ) {\n\t\t\tif( typeof f[$0] !== \"function\" && typeof $3 === \"undefined\" ) {\n\t\t\t\tthrow new Error(\"Invalid format: \" + $0);\n\t\t\t}\n\n\t\t\t// check for ordinal suffix in format\n\t\t\t// ($3 would be undefined if $0 was escaped text)\n\t\t\treturn ( $3 === \"o\"\n\t\t\t\t// ? self.ordinal.call( this, f[$0.replace( \"o\", \"\" )].call(this) )\n\t\t\t\t// : f[$0].call(this)\n\t\t\t\t? self.ordinal.call( self, f[$0.replace( \"o\", \"\" )].call(self) )\n\t\t\t\t: f[$0].call(self)\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn $1 || $0;\n\t\t}\n\t} );\n};\n\n\n/**\n * Attempt to accept unpredictable date formats and make them parsable\n */\n\nEpoch.prototype.parse = function parse( date ) {\n\t// possible additional date parser\n\t// /\\b(?:(?:Mon)|(?:Tues?)|(?:Wed(?:nes)?)|(?:Thur?s?)|(?:Fri)|(?:Sat(?:ur)?)|(?:Sun))(?:day)?\\b[:\\-,]?\\s*[a-zA-Z]{3,9}\\s+\\d{1,2}\\s*,?\\s*\\d{4}/i;\n\n\t// standard YYYY-MM-DD (optional hh:mm:ss) format, with common separators\n\tvar ret;\n\tvar YYYYMMDDhhmmss = /^(\\d{4})[.,-_](\\d{2})[.,-_](\\d{2})(?:\\s*(\\d{2})[.:](\\d{2})[.:](\\d{2}))?$/;\n\tif ( YYYYMMDDhhmmss.test( date ) ) {\n\t\tvar m = date.match(YYYYMMDDhhmmss);\n\t\tm.shift();\n\t\tdelete m.index;\n\t\tdelete m.input;\n\t\tret = new Date(m[0], parseInt(m[1]) - 1, m[2], ( m[3] || 0), (m[4] || 0), (m[5] || 0) );\n\t}\n\telse {\n\t\tret = new Date(date);\n\t}\n\n\treturn ret;\n};\n\n\nEpoch.prototype.from = Epoch.prototype.diff = function from( date, rel ) {\n\trel = rel || { pre: this.lang.from.pre, suf: this.lang.from.suf };\n\tdate = ( date ? new Date( this.parse( date ) ) : new Date() );\n\n\tvar interval = '',\n\t\tunit = '',\n\t\tdiff = Math.floor( ( date - this.native ) / 1000 ),\n\t\tseconds = Math.abs( diff );\n\n\tif( seconds >= 31536000 || Math.floor( seconds / 2592000 ) === 12 ) {\n\t\tinterval = Math.floor( seconds / 31536000 ) || 1;\n\t\tunit = this.lang.from.year;\n\t}\n\n\t// just average it out to 30 days\n\telse if( seconds >= 2592000 ) {\n\t\tinterval = Math.floor( seconds / 2592000 );\n\t\tunit = this.lang.from.month;\n\t}\n\n\telse if( seconds >= 86400 ) {\n\t\tinterval = Math.floor( seconds / 86400 );\n\t\tunit = this.lang.from.day;\n\t}\n\n\telse if( seconds >= 3600 ) {\n\t\tinterval = Math.floor( seconds / 3600 );\n\t\tunit = this.lang.from.hour;\n\t}\n\n\telse if( seconds >= 60 ) {\n\t\tinterval = Math.floor( seconds / 60 );\n\t\tunit = this.lang.from.minute;\n\t}\n\n\telse {\n\t\tinterval = this.lang.from.less;\n\t\tunit = this.lang.from.minute;\n\t}\n\n\t// singulural\n\tif( typeof interval === 'number' && interval > 1 )\n\t\tunit += 's'\n\n\tinterval = interval + ' ' + unit;\n\n\treturn ( diff > 0 ? rel.pre + ' ' + interval : interval + ' ' + rel.suf );\n};\n\n\n// collection of functions to return date formats\nEpoch.prototype._format = {\n\n\t// Lowercase am/pm\n\ta: function a() {\n\t\treturn ( this.hour() > 11 ? 'pm' : 'am' );\n\t},\n\n\t// Uppercase AM/PM\n\tA: function A() {\n\t\treturn ( this.hour() > 11 ? 'PM' : 'AM' );\n\t},\n\n\t// Numeric representation of the day of the week, 0 - 6 : Sun - Sat\n\td: function d() {\n\t\treturn this.day();\n\t},\n\n\t// Numeric representation of the day of the week, 1 - 7 : Sun - Sat\n\tdd: function dd() {\n\t\treturn this.day() + 1;\n\t},\n\n\t// A textual representation of a day, three letters\n\tddd: function ddd() {\n\t\treturn this.lang.d[ this.day() ];\n\t},\n\n\t// A full textual representation of the day of the week\n\tdddd: function dddd() {\n\t\treturn this.lang.day[ this.day() ]\n\t},\n\n\t// Day of the month without leading zeros\n\tD: function D() {\n\t\treturn this.date();\n\t},\n\n\t// Day of the month with leading zeros\n\tDD: function DD() {\n\t\tvar d = this.date();\n\t\treturn ( d < 10 ? '0' + d : d );\n\t},\n\n\t// The day of the year (starting from 0)\n\tDDD: function DDD() {\n\t\tvar doy = new Date( this.year(), 0, 0 );\n\t\treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t},\n\n\t// The day of the year (starting from 0)\n\t// DDDD: function() {\n\t// \tvar doy = new Date( this.year(), 0, 0 );\n\t// \treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t// },\n\n\t// 24-hour format of an hour without leading zeros\n\th: function h() {\n\t\treturn this.hour();\n\t},\n\n\t// 12-hour format of an hour without leading zeros\n\tH: function H() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : h );\n\t},\n\n\t// 24-hour format of an hour with leading zeros\n\thh: function hh() {\n\t\tvar hh = this.hour();\n\t\treturn ( hh < 10 ? '0' + hh : hh );\n\t},\n\n\t// 12-hour format of an hour with leading zeros\n\tHH: function HH() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : ( h < 10 ? '0' + h : h ) );\n\t},\n\n\tLL: function LL() {\n\t\tvar d = epoch(this.native.getTime());\n\n\t\td.date(1);\n\t\td.month('+1');\n\t\td.date(0);\n\n\t\treturn d.date();\n\t},\n\n\t// Minutes without leading zeros\n\tm: function m() {\n\t\treturn this.min();\n\t},\n\n\t// Minutes with leading zeros\n\tmm: function mm() {\n\t\tvar mm = this.min();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// Numeric representation of a month, without leading zeros\n\tM: function M() {\n\t\treturn this.month();\n\t},\n\n\t// Numeric representation of a month, with leading zeros\n\tMM: function MM() {\n\t\tvar mm = this.month();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// A short textual representation of a month, three letters\n\tMMM: function MMM() {\n\t\t// textual representations should be abstracted into\n\t\t// pluggable language files\n\t\treturn this.lang.mon[ this.month() - 1 ];\n\t},\n\n\t// A full textual representation of a month, such as January or March\n\tMMMM: function MMMM() {\n\t\treturn this.lang.month[ this.month() - 1 ];\n\t},\n\n\t// Seconds, without leading zeros\n\ts: function s() {\n\t\treturn this.sec();\n\t},\n\n\t// Seconds, with leading zeros\n\tss: function ss() {\n\t\tvar ss = this.sec();\n\t\treturn ( ss < 10 ? '0' + ss : ss );\n\t},\n\n\t// Milliseconds\n\tu: function u() {\n\t\treturn this.milli();\n\t},\n\n\t// Unix timestamp\n\tU: function U() {\n\t\treturn Math.round( this.time() / 1000 );\n\t},\n\n\t// ISO-8601 week number of year, weeks starting on Monday\n\tww: function ww() {\n\t\tvar d = new Date( this.year(), 0, 1 );\n\t\td = Math.ceil( ( this.native - d ) / 86400000 );\n\t\td += this.date();\n\t\td -= this.day() + 10;\n\t\treturn Math.floor( d / 7 );\n\t},\n\n\t// A full numeric representation of a year, 4 digits\n\tYYYY: function YYYY() {\n\t\treturn this.year();\n\t},\n\n\t// A two digit representation of a year\n\tYY: function YY() {\n\t\treturn this.year().toString().substr(-2);\n\t},\n\n\t// 4 digit timezone offset with sign, ex: +/-0000\n\tZ: function Z() {\n\t\tvar z = -( this.native.getTimezoneOffset() / .6 );\n\t\tvar sign = ( z >= 0 ? '+' : '-' );\n\t\treturn sign + ( '0000' + Math.abs(z) ).slice(-4);\n\t},\n\n\tZZ: function ZZ() {\n\t\tvar z = this._format.Z.call(this);\n\t\treturn [ z.slice(0,3), z.slice(3,5) ].join(':');\n\t},\n\n\t// 3 letter time zone abbrev\n\tZZZ: function ZZZ() {\n\t\treturn this.native.toString().match(/\\((\\w*)\\)/)[1];\n\t}\n};\n\n\n// unix timestamp\nEpoch.prototype.timestamp = function timestamp() {\n\treturn Math.round( this.time() / 1000 );\n};\n\n\n// true/false if year is leap year\nEpoch.prototype.leap = Epoch.prototype.leapYear = function leap_leapYear() {\n\tvar y = this.year();\n\treturn ( ( y % 4 === 0 ) && ( y % 100 !== 0 ) ) || ( y % 400 === 0 );\n};\n\n\n// 1123 and 2822 are the same format\nEpoch.prototype.rfc2822 = Epoch.prototype.rfc1123 = function rfc1123_rfc2822() {\n\treturn this.native.toUTCString();\n};\n\nEpoch.prototype.rfc8601 = Epoch.prototype.iso8601 = function iso8601() {\n\treturn this.format('YYYY-MM-DD[T]hh:mm:ss[+0000]');\n};\n\n// format accepted by SQL DATE column type\nEpoch.prototype.sqldate = function sqldate() {\n\treturn this.format('YYYY-MM-DD');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqltime = function sqltime() {\n\treturn this.format('hh:mm:ss');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqleod = function sqleod() {\n\treturn this.format('YYYY-MM-DD [23:59:59]');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqlsod = function sqlsod() {\n\treturn this.format('YYYY-MM-DD [00:00:00]');\n};\n\n// format accepted by SQL DATETIME column type\nEpoch.prototype.datetime = function datetime() {\n\treturn this.format('YYYY-MM-DD hh:mm:ss');\n};\n\nEpoch.prototype.fdow = function fdow() {\n\tvar d = this.day();\n\n\tif( d !== 0 ) {\n\t\tthis.date('-' + d);\n\t}\n\n\treturn this;\n};\n\n// return number + ordinal suffix for num\nEpoch.prototype.ordinal = function ordinal( num ) {\n\tif( num >= 11 && num <= 13 )\n\t\tnum += \"th\";\n\n\telse {\n\t\tswitch( num % 10 ) {\n\t\t\tcase 1:  num += \"st\"; break;\n\t\t\tcase 2:  num += \"nd\"; break;\n\t\t\tcase 3:  num += \"rd\"; break;\n\t\t\tdefault: num += \"th\"; break;\n\t\t}\n\t}\n\n\treturn num;\n};\n\n\n/**\n * WRAPPER SECTION *******************************************************\n * here be lizards... changing below this line could break things, careful\n */\n\n\nEpoch.prototype._set = function _set( val, set, get ) {\n\t// if val is a string preceeded by \"+\" or \"-\", parse to int\n\t// (making it positive or negative) and add to current val\n\t// else if val is an int (or stringified int), just set new value\n\tset.call( this.native, ( /(\\+|-)\\d/g.exec( val )\n\t\t? get.call( this.native ) + parseInt( val )\n\t\t: val ) );\n}\n\n\nEpoch.prototype.date = function date( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setDate, this.native.getDate );\n\t}\n\n\treturn this.native.getDate();\n};\n\nEpoch.prototype.hour = function hour( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setHours, this.native.getHours );\n\t}\n\n\treturn this.native.getHours();\n};\n\nEpoch.prototype.min = function min( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMinutes, this.native.getMinutes );\n\t}\n\n\treturn this.native.getMinutes();\n};\n\nEpoch.prototype.sec = function sec( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setSeconds, this.native.getSeconds );\n\t}\n\n\treturn this.native.getSeconds();\n};\n\nEpoch.prototype.milli = function milli( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMilliseconds, this.native.getMilliseconds );\n\t}\n\n\treturn this.native.getMilliseconds();\n};\n\nEpoch.prototype.month = function month( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tif( ! /(\\+|-)/g.exec( val ) )\n\t\t\tval = parseInt(val) - 1;\n\t\tthis._set( val, this.native.setMonth, this.native.getMonth );\n\t}\n\n\t// js returns jan = 0, dec = 11... don't know why\n\t// don't change this, this is the one true way\n\treturn this.native.getMonth() + 1;\n};\n\nEpoch.prototype.year = function year( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setFullYear, this.native.getFullYear );\n\t}\n\n\treturn this.native.getFullYear();\n};\n\nEpoch.prototype.day = function day() {\n\treturn this.native.getDay();\n};\n\nEpoch.prototype.time = function time() {\n\treturn this.native.getTime();\n};\n\n\nEpoch.prototype._lang = {\n\t\"en-us\": {\n\t\tmonth: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t'August', 'September', 'October', 'November', 'December' ],\n\n\t\tmon: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t\t'Oct', 'Nov', 'Dec' ],\n\n\t\tday: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\n\t\t\t'Friday', 'Saturday' ],\n\n\t\td: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\n\t\tfrom: {\n\t\t\tpre: 'in',\n\t\t\tsuf: 'ago',\n\t\t\tminute: 'minute',\n\t\t\thour: 'hour',\n\t\t\tday: 'day',\n\t\t\tmonth: 'month',\n\t\t\tyear: 'year',\n\t\t\tless: 'less than a'\n\t\t}\n\t}\n};\n\n})();\n"],"sourceRoot":"/source/"}