{"version":3,"sources":["epoch.js"],"names":["exports","epoch","format","lang","Epoch","Date","_g","String","this","parse","_lang","set","val","get","call","exec","parseInt","native","module","window","prototype","str","length","Error","f","_format","self","rx","replace","$0","$1","$2","$3","ordinal","date","test","d","getHours","getMinutes","getSeconds","join","from","diff","rel","pre","suf","interval","unit","Math","floor","seconds","abs","year","month","day","hour","minute","less","a","A","dd","ddd","dddd","D","DD","DDD","doy","ceil","h","H","hh","HH","LL","getTime","m","min","mm","M","MM","MMM","mon","MMMM","s","sec","ss","u","milli","U","round","time","ww","YYYY","YY","toString","substr","Z","z","getTimezoneOffset","sign","slice","ZZ","ZZZ","match","timestamp","leap","leapYear","y","rfc2822","rfc1123","toUTCString","rfc8601","iso8601","sqldate","sqltime","sqleod","sqlsod","datetime","num","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","getMilliseconds","setMonth","getMonth","setFullYear","getFullYear","getDay","en-us"],"mappings":"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","file":"epoch.min.js","sourcesContent":["(function (exports) {\n\"use strict\";\n\nvar _g = {\n\tset: function set( val, set, get ) {\n\t\t// if val is a string preceeded by \"+\" or \"-\", parse to int\n\t\t// (making it positive or negative) and add to current val\n\t\t// else if val is an int (or stringified int), just set new value\n\t\tset.call( _g.native, ( /(\\+|-)\\d/g.exec( val )\n\t\t\t? get.call( _g.native ) + parseInt( val )\n\t\t\t: val ) );\n\t},\n\n\tnative: null\n};\n\n// constructor wrapper\nfunction epoch( format, lang ) {\n\tlang = lang || 'en-us';\n\n\treturn new Epoch( format, lang );\n};\n\n\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = epoch;\n}\nelse {\n\twindow.epoch = epoch;\n}\n\n\n// constructor\nfunction Epoch( format, lang ) {\n\tif( format instanceof Date ) {\n\t\t_g.native = format;\n\t}\n\telse if( format === 'string' || format instanceof String ) {\n\t\t_g.native = new Date( this.parse( format ) );\n\t}\n\telse {\n\t\t_g.native = new Date();\n\t}\n\n\tthis.lang = this._lang[lang];\n}\n\n\n/**\n * Break a format down into componenets and execute their formatting fn\n */\n\nEpoch.prototype.format = function format( str ) {\n\tif( str.length === 0 ) {\n\t\tthrow new Error('No format specified');\n\t}\n\n\tvar f = this._format,\n\t\tself = this,\n\t\t// regex breakdown:\n\t\t// (it's about perfect, so modify with extreme caution)\n\t\t// * looks for text surrounded by brackets \"[]\",\n\t\t// * OR \"|\"\n\t\t// * looks for repeating occurences of a character (or just one),\n\t\t// * possibly followed by one \"o\" (ordinal suffix)\n\t\trx = /\\[([^\\[]*)\\]|(\\w)\\2*(o)?/g;\n\n\t// $0 is format received\n\t// $1 is value of escaped text, if used\n\t// $2 is repeating format token\n\t// $3 is \"o\" if ordinal suffix is to be used\n\treturn str.replace( rx, function( $0, $1, $2, $3 ) {\n\t\t// $1 will only be defined if escaped text was found\n\n\t\tif( typeof $1 === \"undefined\" ) {\n\t\t\tif( typeof f[$0] !== \"function\" && typeof $3 === \"undefined\" ) {\n\t\t\t\tthrow new Error(\"Invalid format: \" + $0);\n\t\t\t}\n\n\t\t\t// check for ordinal suffix in format\n\t\t\t// ($3 would be undefined if $0 was escaped text)\n\t\t\treturn ( $3 === \"o\"\n\t\t\t\t? self.ordinal.call( self, f[$0.replace( \"o\", \"\" )].call(self) )\n\t\t\t\t: f[$0].call(self)\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn $1 || $0;\n\t\t}\n\t} );\n};\n\n\n/**\n * Attempt to accept unpredictable date formats and make them parsable\n */\n\nEpoch.prototype.parse = function parse( date ) {\n\t// possible additional date parser\n\t// /\\b(?:(?:Mon)|(?:Tues?)|(?:Wed(?:nes)?)|(?:Thur?s?)|(?:Fri)|(?:Sat(?:ur)?)|(?:Sun))(?:day)?\\b[:\\-,]?\\s*[a-zA-Z]{3,9}\\s+\\d{1,2}\\s*,?\\s*\\d{4}/i;\n\n\t// standard YYYY-MM-DD format, with common separators\n\tif( /^\\d{4}[.,-_]\\d{2}[.,-_]\\d{2}\\s*$/.test( date ) ){\n\t\tvar d = new Date();\n\t\tdate += ' ' + [ d.getHours(), d.getMinutes(), d.getSeconds() ].join(':');\n\t}\n\n\treturn date;\n};\n\n\nEpoch.prototype.from = Epoch.prototype.diff = function from( date, rel ) {\n\trel = rel || { pre: this.lang.from.pre, suf: this.lang.from.suf };\n\tdate = ( date ? new Date( this.parse( date ) ) : new Date() );\n\n\tvar interval = '',\n\t\tunit = '',\n\t\tdiff = Math.floor( ( date - _g.native ) / 1000 ),\n\t\tseconds = Math.abs( diff );\n\n\tif( seconds >= 31536000 || Math.floor( seconds / 2592000 ) === 12 ) {\n\t\tinterval = Math.floor( seconds / 31536000 ) || 1;\n\t\tunit = this.lang.from.year;\n\t}\n\n\t// just average it out to 30 days\n\telse if( seconds >= 2592000 ) {\n\t\tinterval = Math.floor( seconds / 2592000 );\n\t\tunit = this.lang.from.month;\n\t}\n\n\telse if( seconds >= 86400 ) {\n\t\tinterval = Math.floor( seconds / 86400 );\n\t\tunit = this.lang.from.day;\n\t}\n\n\telse if( seconds >= 3600 ) {\n\t\tinterval = Math.floor( seconds / 3600 );\n\t\tunit = this.lang.from.hour;\n\t}\n\n\telse if( seconds >= 60 ) {\n\t\tinterval = Math.floor( seconds / 60 );\n\t\tunit = this.lang.from.minute;\n\t}\n\n\telse {\n\t\tinterval = this.lang.from.less;\n\t\tunit = this.lang.from.minute;\n\t}\n\n\t// singulural\n\tif( typeof interval === 'number' && interval > 1 )\n\t\tunit += 's'\n\n\tinterval = interval + ' ' + unit;\n\n\treturn ( diff > 0 ? rel.pre + ' ' + interval : interval + ' ' + rel.suf );\n};\n\n\n// collection of functions to return date formats\nEpoch.prototype._format = {\n\n\t// Lowercase am/pm\n\ta: function a() {\n\t\treturn ( this.hour() > 11 ? 'pm' : 'am' );\n\t},\n\n\t// Uppercase AM/PM\n\tA: function A() {\n\t\treturn ( this.hour() > 11 ? 'PM' : 'AM' );\n\t},\n\n\t// Numeric representation of the day of the week, 0 - 6 : Sun - Sat\n\td: function d() {\n\t\treturn this.day();\n\t},\n\n\t// Numeric representation of the day of the week, 1 - 7 : Sun - Sat\n\tdd: function dd() {\n\t\treturn this.day() + 1;\n\t},\n\n\t// A textual representation of a day, three letters\n\tddd: function ddd() {\n\t\treturn this.lang.d[ this.day() ];\n\t},\n\n\t// A full textual representation of the day of the week\n\tdddd: function dddd() {\n\t\treturn this.lang.day[ this.day() ]\n\t},\n\n\t// Day of the month without leading zeros\n\tD: function D() {\n\t\treturn this.date();\n\t},\n\n\t// Day of the month with leading zeros\n\tDD: function DD() {\n\t\tvar d = this.date();\n\t\treturn ( d < 10 ? '0' + d : d );\n\t},\n\n\t// The day of the year (starting from 0)\n\tDDD: function DDD() {\n\t\tvar doy = new Date( this.year(), 0, 0 );\n\t\treturn Math.ceil( ( _g.native - doy ) / 86400000 );\n\t},\n\n\t// The day of the year (starting from 0)\n\t// DDDD: function() {\n\t// \tvar doy = new Date( this.year(), 0, 0 );\n\t// \treturn Math.ceil( ( _g.native - doy ) / 86400000 );\n\t// },\n\n\t// 24-hour format of an hour without leading zeros\n\th: function h() {\n\t\treturn this.hour();\n\t},\n\n\t// 12-hour format of an hour without leading zeros\n\tH: function H() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : h );\n\t},\n\n\t// 24-hour format of an hour with leading zeros\n\thh: function hh() {\n\t\tvar hh = this.hour();\n\t\treturn ( hh < 10 ? '0' + hh : hh );\n\t},\n\n\t// 12-hour format of an hour with leading zeros\n\tHH: function HH() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : ( h < 10 ? '0' + h : h ) );\n\t},\n\n\tLL: function LL() {\n\t\tvar d = epoch(_g.native.getTime());\n\t\td.date(1);\n\t\td.month('+1');\n\t\td.date(0);\n\n\t\treturn d.date();\n\t},\n\n\t// Minutes without leading zeros\n\tm: function m() {\n\t\treturn this.min();\n\t},\n\n\t// Minutes with leading zeros\n\tmm: function mm() {\n\t\tvar mm = this.min();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// Numeric representation of a month, without leading zeros\n\tM: function M() {\n\t\treturn this.month();\n\t},\n\n\t// Numeric representation of a month, with leading zeros\n\tMM: function MM() {\n\t\tvar mm = this.month();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// A short textual representation of a month, three letters\n\tMMM: function MMM() {\n\t\t// textual representations should be abstracted into\n\t\t// pluggable language files\n\t\treturn this.lang.mon[ this.month() - 1 ];\n\t},\n\n\t// A full textual representation of a month, such as January or March\n\tMMMM: function MMMM() {\n\t\treturn this.lang.month[ this.month() - 1 ];\n\t},\n\n\t// Seconds, without leading zeros\n\ts: function s() {\n\t\treturn this.sec();\n\t},\n\n\t// Seconds, with leading zeros\n\tss: function ss() {\n\t\tvar ss = this.sec();\n\t\treturn ( ss < 10 ? '0' + ss : ss );\n\t},\n\n\t// Milliseconds\n\tu: function u() {\n\t\treturn this.milli();\n\t},\n\n\t// Unix timestamp\n\tU: function U() {\n\t\treturn Math.round( this.time() / 1000 );\n\t},\n\n\t// ISO-8601 week number of year, weeks starting on Monday\n\tww: function ww() {\n\t\tvar d = new Date( this.year(), 0, 1 );\n\t\td = Math.ceil( ( _g.native - d ) / 86400000 );\n\t\td += this.date();\n\t\td -= this.day() + 10;\n\t\treturn Math.floor( d / 7 );\n\t},\n\n\t// A full numeric representation of a year, 4 digits\n\tYYYY: function YYYY() {\n\t\treturn this.year();\n\t},\n\n\t// A two digit representation of a year\n\tYY: function YY() {\n\t\treturn this.year().toString().substr(-2);\n\t},\n\n\t// 4 digit timezone offset with sign, ex: +/-0000\n\tZ: function Z() {\n\t\tvar z = -( _g.native.getTimezoneOffset() / .6 );\n\t\tvar sign = ( z >= 0 ? '+' : '-' );\n\t\treturn sign + ( '0000' + Math.abs(z) ).slice(-4);\n\t},\n\n\tZZ: function ZZ() {\n\t\tvar z = this._format.Z.call(this);\n\t\treturn [ z.slice(0,3), z.slice(3,5) ].join(':');\n\t},\n\n\t// 3 letter time zone abbrev\n\tZZZ: function ZZZ() {\n\t\treturn _g.native.toString().match(/\\((\\w*)\\)/)[1];\n\t}\n};\n\n\n// unix timestamp\nEpoch.prototype.timestamp = function timestamp() {\n\treturn Math.round( this.time() / 1000 );\n};\n\n\n// true/false if year is leap year\nEpoch.prototype.leap = Epoch.prototype.leapYear = function leap_leapYear() {\n\tvar y = this.year();\n\treturn ( ( y % 4 === 0 ) && ( y % 100 !== 0 ) ) || ( y % 400 === 0 );\n};\n\n\n// 1123 and 2822 are the same format\nEpoch.prototype.rfc2822 = Epoch.prototype.rfc1123 = function rfc1123_rfc2822() {\n\treturn _g.native.toUTCString();\n};\n\nEpoch.prototype.rfc8601 = Epoch.prototype.iso8601 = function iso8601() {\n\treturn this.format('YYYY-MM-DD[T]hh:mm:ss[+0000]');\n};\n\n// format accepted by SQL DATE column type\nEpoch.prototype.sqldate = function sqldate() {\n\treturn this.format('YYYY-MM-DD');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqltime = function sqltime() {\n\treturn this.format('hh:mm:ss');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqleod = function sqleod() {\n\treturn this.format('YYYY-MM-DD [23:59:59]');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqlsod = function sqlsod() {\n\treturn this.format('YYYY-MM-DD [00:00:00]');\n};\n\n// format accepted by SQL DATETIME column type\nEpoch.prototype.datetime = function datetime() {\n\treturn this.format('YYYY-MM-DD hh:mm:ss');\n};\n\n// return number + ordinal suffix for num\nEpoch.prototype.ordinal = function ordinal( num ) {\n\tif( num >= 11 && num <= 13 )\n\t\tnum += \"th\";\n\n\telse {\n\t\tswitch( num % 10 ) {\n\t\t\tcase 1:  num += \"st\"; break;\n\t\t\tcase 2:  num += \"nd\"; break;\n\t\t\tcase 3:  num += \"rd\"; break;\n\t\t\tdefault: num += \"th\"; break;\n\t\t}\n\t}\n\n\treturn num;\n};\n\nEpoch.prototype.native = function native() {\n\treturn _g.native;\n};\n\n\n/**\n * WRAPPER SECTION *******************************************************\n * here be lizards... changing below this line could break things, careful\n */\n\n\nEpoch.prototype.date = function date( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setDate, _g.native.getDate );\n\t}\n\n\treturn _g.native.getDate();\n};\n\nEpoch.prototype.hour = function hour( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setHours, _g.native.getHours );\n\t}\n\n\treturn _g.native.getHours();\n};\n\nEpoch.prototype.min = function min( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setMinutes, _g.native.getMinutes );\n\t}\n\n\treturn _g.native.getMinutes();\n};\n\nEpoch.prototype.sec = function sec( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setSeconds, _g.native.getSeconds );\n\t}\n\n\treturn _g.native.getSeconds();\n};\n\nEpoch.prototype.milli = function milli( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setMilliseconds, _g.native.getMilliseconds );\n\t}\n\n\treturn _g.native.getMilliseconds();\n};\n\nEpoch.prototype.month = function month( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tif( ! /(\\+|-)/g.exec( val ) )\n\t\t\tval = parseInt(val) - 1;\n\t\t_g.set( val, _g.native.setMonth, _g.native.getMonth );\n\t}\n\n\t// js returns jan = 0, dec = 11... don't know why\n\t// don't change this, this is the one true way\n\treturn _g.native.getMonth() + 1;\n};\n\nEpoch.prototype.year = function year( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\t_g.set( val, _g.native.setFullYear, _g.native.getFullYear );\n\t}\n\n\treturn _g.native.getFullYear();\n};\n\nEpoch.prototype.day = function day() {\n\treturn _g.native.getDay();\n};\n\nEpoch.prototype.time = function time() {\n\treturn _g.native.getTime();\n};\n\n\nEpoch.prototype._lang = {\n\t\"en-us\": {\n\t\tmonth: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t'August', 'September', 'October', 'November', 'December' ],\n\n\t\tmon: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t\t'Oct', 'Nov', 'Dec' ],\n\n\t\tday: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\n\t\t\t'Friday', 'Saturday' ],\n\n\t\td: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\n\t\tfrom: {\n\t\t\tpre: 'in',\n\t\t\tsuf: 'ago',\n\t\t\tminute: 'minute',\n\t\t\thour: 'hour',\n\t\t\tday: 'day',\n\t\t\tmonth: 'month',\n\t\t\tyear: 'year',\n\t\t\tless: 'less than a'\n\t\t}\n\t}\n};\n\n})( typeof window === 'undefined' ? module.exports : window );"],"sourceRoot":"/source/"}