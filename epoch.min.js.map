{"version":3,"sources":["epoch.js"],"names":["epoch","format","lang","Epoch","this","_lang","Date","time","parse","module","exports","window","convert","secs","trim","ret","parseInt","form","Math","floor","map","v","filter","i","join","split","mult","sum","slice","length","prototype","str","Error","f","_format","self","rx","replace","$0","$1","$2","$3","call","ordinal","date","nat_lang","RegExp","r","source","YYYYMMDDhhmmss","test","m","match","shift","index","input","mon","charAt","toUpperCase","toLowerCase","indexOf","from","rel","pre","suf","interval","unit","diff","seconds","abs","year","month","day","hour","minute","less","a","A","d","dd","ddd","dddd","D","DD","DDD","doy","ceil","h","H","hh","HH","LL","getTime","min","mm","M","MM","MMM","MMMM","s","sec","ss","u","milli","U","round","ww","YYYY","YY","toString","substr","Z","z","getTimezoneOffset","sign","ZZ","ZZZ","timestamp","leap","leapYear","y","rfc2822","rfc1123","toUTCString","rfc8601","iso8601","sqldate","sqltime","sqleod","sqlsod","datetime","fdow","num","_set","val","set","get","exec","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","setMonth","getMonth","setFullYear","getFullYear","getDay","en-us"],"mappings":"CAAA,WACA,YAGA,SAAAA,GAAAC,EAAAC,GAGA,MAFAA,GAAAA,GAAA,QAEA,GAAAC,GAAAF,EAAAC,GAuDA,QAAAC,GAAAF,EAAAC,GACAE,KAAAF,KAAAE,KAAAC,MAAAH,GAEAD,YAAAK,MACAF,KAAAA,UAAAH,EAEAA,YAAAE,GACAC,KAAAA,UAAA,GAAAE,MAAAL,EAAAM,QAEAN,EACAG,KAAAA,UAAAA,KAAAI,MAAAP,GAGAG,KAAAA,UAAA,GAAAE,MAhEA,mBAAAG,SAAAA,OAAAC,QACAD,OAAAC,QAAAV,EAGAW,OAAAX,MAAAA,EAGAA,EAAAY,QAAA,SAAAC,EAAAC,GACA,GAAAC,EAEA,IAAA,gBAAAF,GAAA,CAEA,mBAAAC,KACAA,GAAA,EAOA,IAAAD,GAAAG,SAAAH,EAAA,IAEAI,GAAAC,KAAAC,MAAAN,EAAA,MAAA,GAAAK,KAAAC,MAAAN,EAAA,IAAA,GAAAA,EAAA,IACAO,IAAA,SAAAC,GAAA,MAAA,IAAAA,EAAA,IAAAA,EAAAA,GAGAP,KACAG,EAAAA,EAAAK,OAAA,SAAAD,EAAAE,GAAA,MAAA,OAAAF,GAAAE,EAAA,KAGAR,EAAAE,EAAAO,KAAA,SAGA,CACAX,EAAAA,EAAAY,MAAA,KAAAL,IAAA,SAAAC,GAAA,MAAAL,UAAAK,EAAA,KACA,IAAAK,IAAA,MAAA,KAAA,GAAA,GAEAC,EAAA,CAEAD,GAAAE,MAAAF,EAAAG,OAAAhB,EAAA,QAAAO,IAAA,SAAAC,EAAAE,GACAI,GAAAN,EAAAR,EAAAU,KAGAR,EAAAY,EAGA,MAAAZ,IA4BAZ,EAAA2B,UAAA7B,OAAA,SAAA8B,GACA,GAAA,IAAAA,EAAAF,OACA,KAAA,IAAAG,OAAA,sBAGA,IAAAC,GAAA7B,KAAA8B,QACAC,EAAA/B,KAOAgC,EAAA,2BAOA,OAAAL,GAAAM,QAAAD,EAAA,SAAAE,EAAAC,EAAAC,EAAAC,GACA,GAAA,mBAAAF,GAAA,CACA,GAAA,kBAAAN,GAAAK,IAAA,mBAAAG,GACA,KAAA,IAAAT,OAAA,mBAAAM,EAKA,OAAA,mBAAAG,GACAR,EAAAK,GAAAI,KAAAP,GACAA,EAAAQ,QAAAD,KAAAP,EAAAF,EAAAK,EAAAD,QAAA,IAAA,KAAAK,KAAAP,IAKA,MAAAI,IAAAD,KAUAnC,EAAA2B,UAAAtB,MAAA,SAAAoC,GAEA,GASA7B,GATA8B,EAAA,GAAAC,SACA,8GACA,uHACA,mFACA1B,IAAA,SAAA2B,GAAA,MAAAA,GAAAC,SAAAxB,KAAA,IAAA,KAGAyB,EAAA,0EAIA,IAAAA,EAAAC,KAAAN,GAAA,CACA,GAAAO,GAAAP,EAAAQ,MAAAH,EACAE,GAAAE,cACAF,GAAAG,YACAH,GAAAI,MACAxC,EAAA,GAAAT,MAAA6C,EAAA,GAAAnC,SAAAmC,EAAA,IAAA,EAAAA,EAAA,GAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,OAGA,IAAAN,EAAAK,KAAAN,GAAA,CACA,GAAAO,GAAAP,EAAAQ,MAAAP,EACAM,GAAAE,cACAF,GAAAG,YACAH,GAAAI,KAEA,IAAAC,GAAAL,EAAA,GAAAM,OAAA,GAAAC,cAAAP,EAAA,GAAAvB,MAAA,EAAA,GAAA+B,aACAH,GAAApD,KAAAF,KAAAsD,IAAAI,QAAAJ,GACAzC,EAAA,GAAAT,MAAA6C,EAAA,GAAAK,EAAAL,EAAA,GAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,OAIApC,GAAA,GAAAT,MAAAsC,EAGA,OAAA7B,IAIAZ,EAAA2B,UAAA+B,KAAA,SAAAjB,EAAAkB,GACAA,EAAAA,IAAAC,IAAA3D,KAAAF,KAAA2D,KAAAE,IAAAC,IAAA5D,KAAAF,KAAA2D,KAAAG,KACApB,EAAAA,EAAA,GAAAtC,MAAAF,KAAAI,MAAAoC,IAAA,GAAAtC,KAEA,IAAA2D,GAAA,GACAC,EAAA,GACAC,EAAAjD,KAAAC,OAAAyB,EAAAxC,KAAAA,WAAA,KACAgE,EAAAlD,KAAAmD,IAAAF,EAuCA,OArCAC,IAAA,SAAA,KAAAlD,KAAAC,MAAAiD,EAAA,SACAH,EAAA/C,KAAAC,MAAAiD,EAAA,UAAA,EACAF,EAAA9D,KAAAF,KAAA2D,KAAAS,MAIAF,GAAA,QACAH,EAAA/C,KAAAC,MAAAiD,EAAA,QACAF,EAAA9D,KAAAF,KAAA2D,KAAAU,OAGAH,GAAA,OACAH,EAAA/C,KAAAC,MAAAiD,EAAA,OACAF,EAAA9D,KAAAF,KAAA2D,KAAAW,KAGAJ,GAAA,MACAH,EAAA/C,KAAAC,MAAAiD,EAAA,MACAF,EAAA9D,KAAAF,KAAA2D,KAAAY,MAGAL,GAAA,IACAH,EAAA/C,KAAAC,MAAAiD,EAAA,IACAF,EAAA9D,KAAAF,KAAA2D,KAAAa,SAIAT,EAAA7D,KAAAF,KAAA2D,KAAAc,KACAT,EAAA9D,KAAAF,KAAA2D,KAAAa,QAIA,gBAAAT,IAAAA,EAAA,IACAC,GAAA,KAEAD,EAAAA,EAAA,IAAAC,EAEAC,EAAA,EAAAL,EAAAC,IAAA,IAAAE,EAAAA,EAAA,IAAAH,EAAAE,KAKA7D,EAAA2B,UAAAI,SAGA0C,EAAA,WACA,MAAAxE,MAAAqE,OAAA,GAAA,KAAA,MAIAI,EAAA,WACA,MAAAzE,MAAAqE,OAAA,GAAA,KAAA,MAIAK,EAAA,WACA,MAAA1E,MAAAoE,OAIAO,GAAA,WACA,MAAA3E,MAAAoE,MAAA,GAIAQ,IAAA,WACA,MAAA5E,MAAAF,KAAA4E,EAAA1E,KAAAoE,QAIAS,KAAA,WACA,MAAA7E,MAAAF,KAAAsE,IAAApE,KAAAoE,QAIAU,EAAA,WACA,MAAA9E,MAAAwC,QAIAuC,GAAA,WACA,GAAAL,GAAA1E,KAAAwC,MACA,OAAA,IAAAkC,EAAA,IAAAA,EAAAA,GAIAM,IAAA,WACA,GAAAC,GAAA,GAAA/E,MAAAF,KAAAkE,OAAA,EAAA,EACA,OAAApD,MAAAoE,MAAAlF,KAAAA,UAAAiF,GAAA,QAUAE,EAAA,WACA,MAAAnF,MAAAqE,QAIAe,EAAA,WACA,GAAAD,GAAAnF,KAAAqE,MACA,OAAAc,GAAA,GAAAA,GAAA,GAAAA,GAIAE,GAAA,QAAAA,KACA,GAAAA,GAAArF,KAAAqE,MACA,OAAA,IAAAgB,EAAA,IAAAA,EAAAA,GAIAC,GAAA,WACA,GAAAH,GAAAnF,KAAAqE,MACA,OAAAc,GAAA,GAAAA,GAAA,GAAA,GAAAA,EAAA,IAAAA,EAAAA,GAGAI,GAAA,WACA,GAAAb,GAAA9E,EAAAI,KAAAA,UAAAwF,UAMA,OAJAd,GAAAlC,KAAA,GACAkC,EAAAP,MAAA,MACAO,EAAAlC,KAAA,GAEAkC,EAAAlC,QAIAO,EAAA,WACA,MAAA/C,MAAAyF,OAIAC,GAAA,QAAAA,KACA,GAAAA,GAAA1F,KAAAyF,KACA,OAAA,IAAAC,EAAA,IAAAA,EAAAA,GAIAC,EAAA,WACA,MAAA3F,MAAAmE,SAIAyB,GAAA,WACA,GAAAF,GAAA1F,KAAAmE,OACA,OAAA,IAAAuB,EAAA,IAAAA,EAAAA,GAIAG,IAAA,WAGA,MAAA7F,MAAAF,KAAAsD,IAAApD,KAAAmE,QAAA,IAIA2B,KAAA,WACA,MAAA9F,MAAAF,KAAAqE,MAAAnE,KAAAmE,QAAA,IAIA4B,EAAA,WACA,MAAA/F,MAAAgG,OAIAC,GAAA,QAAAA,KACA,GAAAA,GAAAjG,KAAAgG,KACA,OAAA,IAAAC,EAAA,IAAAA,EAAAA,GAIAC,EAAA,WACA,MAAAlG,MAAAmG,SAIAC,EAAA,WACA,MAAAtF,MAAAuF,MAAArG,KAAAG,OAAA,MAIAmG,GAAA,WACA,GAAA5B,GAAA,GAAAxE,MAAAF,KAAAkE,OAAA,EAAA,EAIA,OAHAQ,GAAA5D,KAAAoE,MAAAlF,KAAAA,UAAA0E,GAAA,OACAA,GAAA1E,KAAAwC,OACAkC,GAAA1E,KAAAoE,MAAA,GACAtD,KAAAC,MAAA2D,EAAA,IAIA6B,KAAA,WACA,MAAAvG,MAAAkE,QAIAsC,GAAA,WACA,MAAAxG,MAAAkE,OAAAuC,WAAAC,OAAA,KAIAC,EAAA,WACA,GAAAC,KAAA5G,KAAAA,UAAA6G,oBAAA,IACAC,EAAAF,GAAA,EAAA,IAAA,GACA,OAAAE,IAAA,OAAAhG,KAAAmD,IAAA2C,IAAApF,MAAA,KAGAuF,GAAA,WACA,GAAAH,GAAA5G,KAAA8B,QAAA6E,EAAArE,KAAAtC,KACA,QAAA4G,EAAApF,MAAA,EAAA,GAAAoF,EAAApF,MAAA,EAAA,IAAAJ,KAAA,MAIA4F,IAAA,WACA,MAAAhH,MAAAA,UAAAyG,WAAAzD,MAAA,aAAA,KAMAjD,EAAA2B,UAAAuF,UAAA,WACA,MAAAnG,MAAAuF,MAAArG,KAAAG,OAAA,MAKAJ,EAAA2B,UAAAwF,KAAAnH,EAAA2B,UAAAyF,SAAA,WACA,GAAAC,GAAApH,KAAAkE,MACA,OAAAkD,GAAA,IAAA,GAAAA,EAAA,MAAA,GAAAA,EAAA,MAAA,GAKArH,EAAA2B,UAAA2F,QAAAtH,EAAA2B,UAAA4F,QAAA,WACA,MAAAtH,MAAAA,UAAAuH,eAGAxH,EAAA2B,UAAA8F,QAAAzH,EAAA2B,UAAA+F,QAAA,WACA,MAAAzH,MAAAH,OAAA,iCAIAE,EAAA2B,UAAAgG,QAAA,WACA,MAAA1H,MAAAH,OAAA,eAIAE,EAAA2B,UAAAiG,QAAA,WACA,MAAA3H,MAAAH,OAAA,aAIAE,EAAA2B,UAAAkG,OAAA,WACA,MAAA5H,MAAAH,OAAA,0BAIAE,EAAA2B,UAAAmG,OAAA,WACA,MAAA7H,MAAAH,OAAA,0BAIAE,EAAA2B,UAAAoG,SAAA,WACA,MAAA9H,MAAAH,OAAA,wBAGAE,EAAA2B,UAAAqG,KAAA,WACA,GAAArD,GAAA1E,KAAAoE,KAMA,OAJA,KAAAM,GACA1E,KAAAwC,KAAA,IAAAkC,GAGA1E,MAIAD,EAAA2B,UAAAa,QAAA,SAAAyF,GACA,GAAAA,GAAA,IAAA,IAAAA,EACAA,GAAA,SAGA,QAAAA,EAAA,IACA,IAAA,GAAAA,GAAA,IAAA,MACA,KAAA,GAAAA,GAAA,IAAA,MACA,KAAA,GAAAA,GAAA,IAAA,MACA,SAAAA,GAAA,KAIA,MAAAA,IAUAjI,EAAA2B,UAAAuG,KAAA,SAAAC,EAAAC,EAAAC,GAIAD,EAAA7F,KAAAtC,KAAAA,UAAA,YAAAqI,KAAAH,GACAE,EAAA9F,KAAAtC,KAAAA,WAAAY,SAAAsH,GACAA,IAIAnI,EAAA2B,UAAAc,KAAA,SAAA0F,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAAsI,QAAAtI,KAAAA,UAAAuI,SAGAvI,KAAAA,UAAAuI,WAGAxI,EAAA2B,UAAA2C,KAAA,SAAA6D,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAAwI,SAAAxI,KAAAA,UAAAyI,UAGAzI,KAAAA,UAAAyI,YAGA1I,EAAA2B,UAAA+D,IAAA,SAAAyC,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAA0I,WAAA1I,KAAAA,UAAA2I,YAGA3I,KAAAA,UAAA2I,cAGA5I,EAAA2B,UAAAsE,IAAA,SAAAkC,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAA4I,WAAA5I,KAAAA,UAAA6I,YAGA7I,KAAAA,UAAA6I,cAGA9I,EAAA2B,UAAAyE,MAAA,SAAA+B,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAA8I,gBAAA9I,KAAAA,UAAA+I,iBAGA/I,KAAAA,UAAA+I,mBAGAhJ,EAAA2B,UAAAyC,MAAA,SAAA+D,GASA,MARA,mBAAAA,KACA,UAAAG,KAAAH,KACAA,EAAAtH,SAAAsH,GAAA,GACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAAgJ,SAAAhJ,KAAAA,UAAAiJ,WAKAjJ,KAAAA,UAAAiJ,WAAA,GAGAlJ,EAAA2B,UAAAwC,KAAA,SAAAgE,GAKA,MAJA,mBAAAA,IACAlI,KAAAiI,KAAAC,EAAAlI,KAAAA,UAAAkJ,YAAAlJ,KAAAA,UAAAmJ,aAGAnJ,KAAAA,UAAAmJ,eAGApJ,EAAA2B,UAAA0C,IAAA,WACA,MAAApE,MAAAA,UAAAoJ,UAGArJ,EAAA2B,UAAAvB,KAAA,WACA,MAAAH,MAAAA,UAAAwF,WAIAzF,EAAA2B,UAAAzB,OACAoJ,SACAlF,OAAA,UAAA,WAAA,QAAA,QAAA,MAAA,OAAA,OACA,SAAA,YAAA,UAAA,WAAA,YAEAf,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MACA,MAAA,MAAA,OAEAgB,KAAA,SAAA,SAAA,UAAA,YAAA,WACA,SAAA,YAEAM,GAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEAjB,MACAE,IAAA,KACAC,IAAA,MACAU,OAAA,SACAD,KAAA,OACAD,IAAA,MACAD,MAAA,QACAD,KAAA,OACAK,KAAA","file":"epoch.min.js","sourcesContent":["(function() {\n\"use strict\";\n\n// constructor wrapper\nfunction epoch( format, lang ) {\n\tlang = lang || 'en-us';\n\n\treturn new Epoch( format, lang );\n};\n\n\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = epoch;\n}\nelse {\n\twindow.epoch = epoch;\n}\n\nepoch.convert = function convert(secs, trim) {\n\tvar ret;\n\n\tif( typeof secs === 'number' ) {\n\n\t\tif( typeof trim === 'undefined' ) {\n\t\t\ttrim = false;\n\t\t}\n\n\t\t// if( typeof fill === 'undefined' ) {\n\t\t// \tfill = false;\n\t\t// }\n\n\t\tvar secs = parseInt(secs, 10);\n\n\t\tvar form = [ Math.floor(secs / 3600) % 24, Math.floor(secs / 60) % 60, secs % 60 ]\n\t\t\t.map( function( v ) { return v < 10 ? '0' + v : v } );\n\n\n\t\tif( trim ) {\n\t\t\tform = form.filter( function( v, i ) { return v !== '00' || i > 0 } );\n\t\t}\n\n\t\tret = form.join(':');\n\t}\n\n\telse {\n\t\tsecs = secs.split(':').map(function(v) { return parseInt(v, 10); });\n\t\tvar mult = [ 86400, 3600, 60, 1 ];\n\n\t\tvar sum = 0;\n\n\t\tmult.slice( mult.length - ( secs.length) ).map( function(v, i ) {\n\t\t\tsum += v * secs[i];\n\t\t});\n\n\t\tret = sum;\n\t}\n\n\treturn ret;\n};\n\n\n// constructor\nfunction Epoch( format, lang ) {\n\tthis.lang = this._lang[lang];\n\n\tif( format instanceof Date ) {\n\t\tthis.native = format;\n\t}\n\telse if( format instanceof Epoch ) {\n\t\tthis.native = new Date( format.time() );\n\t}\n\telse if( format ) {\n\t\tthis.native = this.parse( format );\n\t}\n\telse {\n\t\tthis.native = new Date();\n\t}\n\n}\n\n\n/**\n * Break a format down into componenets and execute their formatting fn\n */\n\nEpoch.prototype.format = function format( str ) {\n\tif( str.length === 0 ) {\n\t\tthrow new Error('No format specified');\n\t}\n\n\tvar f = this._format,\n\t\tself = this,\n\t\t// regex breakdown:\n\t\t// (it's about perfect, so modify with extreme caution)\n\t\t// * looks for text surrounded by brackets \"[]\",\n\t\t// * OR \"|\"\n\t\t// * looks for repeating occurences of a character (or just one),\n\t\t// * possibly followed by one \"o\" (ordinal suffix)\n\t\trx = /\\[([^\\[]*)\\]|(\\w)\\2*(o)?/g;\n\n\t// $0 is format received\n\t// $1 is value of escaped text, undefined if no escaped text was found\n\t// $2 is matched format token (repeated letters that are the same)\n\t// $3 is \"o\" if ordinal suffix is to be used\n\t// return str.replace( rx, ( $0, $1, $2, $3 ) => {\n\treturn str.replace( rx, function( $0, $1, $2, $3 ) {\n\t\tif( typeof $1 === \"undefined\" ) {\n\t\t\tif( typeof f[$0] !== \"function\" && typeof $3 === \"undefined\" ) {\n\t\t\t\tthrow new Error(\"Invalid format: \" + $0);\n\t\t\t}\n\n\t\t\t// check for ordinal suffix in format\n\t\t\t// ($3 would be undefined if $0 was escaped text)\n\t\t\treturn ( typeof $3 === 'undefined'\n\t\t\t\t? f[$0].call(self)\n\t\t\t\t: self.ordinal.call( self, f[$0.replace( \"o\", \"\" )].call(self) )\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn $1 || $0;\n\t\t}\n\t} );\n};\n\n\n/**\n * Attempt to accept unpredictable date formats and make them parsable\n */\n\nEpoch.prototype.parse = function parse( date ) {\n\t// natural language date formats (several variations)\n\tvar nat_lang = new RegExp([\n\t\t/\\b(?:(?:(?:mon)|(?:tues?)|(?:wed(?:nes)?)|(?:thur?s?)|(?:fri)|(?:sat(?:ur)?)|(?:sun))(?:day)?\\b[:\\-,]?\\s*)?/,\n\t\t/((?:jan|feb)?r?(?:uary)?|mar(?:ch)?|apr(?:il)?|may|june?|july?|aug(?:ust)?|oct(?:ober)?|(?:sept?|nov|dec)(?:ember)?)/,\n\t\t/\\s+(\\d{1,2})(?:st|rd|th)?\\s*,?\\s*(\\d{4})(?:\\s*(\\d{1,2})[.:](\\d{2})[.:](\\d{2}))?/,\n\t].map(function(r) {return r.source}).join(''), 'i');\n\n\t// start of ISO 8601 format(s)\n\tvar YYYYMMDDhhmmss = /^(\\d{4})[.,-_](\\d{2})[.,-_](\\d{2})(?:\\s*(\\d{2})[.:](\\d{2})[.:](\\d{2}))?$/;\n\n\tvar ret;\n\n\tif ( YYYYMMDDhhmmss.test( date ) ) {\n\t\tvar m = date.match(YYYYMMDDhhmmss);\n\t\tm.shift();\n\t\tdelete m.index;\n\t\tdelete m.input;\n\t\tret = new Date(m[0], parseInt(m[1]) - 1, m[2], ( m[3] || 0), (m[4] || 0), (m[5] || 0) );\n\t}\n\n\telse if( nat_lang.test(date) ) {\n\t\tvar m = date.match(nat_lang);\n\t\tm.shift();\n\t\tdelete m.index;\n\t\tdelete m.input;\n\n\t\tvar mon = m[0].charAt(0).toUpperCase() + m[0].slice(1,3).toLowerCase();\n\t\tmon = this.lang.mon.indexOf(mon);\n\t\tret = new Date(m[2], mon, m[1], ( m[3] || 0), (m[4] || 0), (m[5] || 0) );\t\n\t}\n\n\telse {\n\t\tret = new Date(date);\n\t}\n\n\treturn ret;\n};\n\n\nEpoch.prototype.from = function from( date, rel ) {\n\trel = rel || { pre: this.lang.from.pre, suf: this.lang.from.suf };\n\tdate = ( date ? new Date( this.parse( date ) ) : new Date() );\n\n\tvar interval = '',\n\t\tunit = '',\n\t\tdiff = Math.floor( ( date - this.native ) / 1000 ),\n\t\tseconds = Math.abs( diff );\n\n\tif( seconds >= 31536000 || Math.floor( seconds / 2592000 ) === 12 ) {\n\t\tinterval = Math.floor( seconds / 31536000 ) || 1;\n\t\tunit = this.lang.from.year;\n\t}\n\n\t// just average it out to 30 days\n\telse if( seconds >= 2592000 ) {\n\t\tinterval = Math.floor( seconds / 2592000 );\n\t\tunit = this.lang.from.month;\n\t}\n\n\telse if( seconds >= 86400 ) {\n\t\tinterval = Math.floor( seconds / 86400 );\n\t\tunit = this.lang.from.day;\n\t}\n\n\telse if( seconds >= 3600 ) {\n\t\tinterval = Math.floor( seconds / 3600 );\n\t\tunit = this.lang.from.hour;\n\t}\n\n\telse if( seconds >= 60 ) {\n\t\tinterval = Math.floor( seconds / 60 );\n\t\tunit = this.lang.from.minute;\n\t}\n\n\telse {\n\t\tinterval = this.lang.from.less;\n\t\tunit = this.lang.from.minute;\n\t}\n\n\t// singulural\n\tif( typeof interval === 'number' && interval > 1 )\n\t\tunit += 's'\n\n\tinterval = interval + ' ' + unit;\n\n\treturn ( diff > 0 ? rel.pre + ' ' + interval : interval + ' ' + rel.suf );\n};\n\n\n// collection of functions to return date formats\nEpoch.prototype._format = {\n\n\t// Lowercase am/pm\n\ta: function a() {\n\t\treturn ( this.hour() > 11 ? 'pm' : 'am' );\n\t},\n\n\t// Uppercase AM/PM\n\tA: function A() {\n\t\treturn ( this.hour() > 11 ? 'PM' : 'AM' );\n\t},\n\n\t// Numeric representation of the day of the week, 0 - 6 : Sun - Sat\n\td: function d() {\n\t\treturn this.day();\n\t},\n\n\t// Numeric representation of the day of the week, 1 - 7 : Sun - Sat\n\tdd: function dd() {\n\t\treturn this.day() + 1;\n\t},\n\n\t// A textual representation of a day, three letters\n\tddd: function ddd() {\n\t\treturn this.lang.d[ this.day() ];\n\t},\n\n\t// A full textual representation of the day of the week\n\tdddd: function dddd() {\n\t\treturn this.lang.day[ this.day() ]\n\t},\n\n\t// Day of the month without leading zeros\n\tD: function D() {\n\t\treturn this.date();\n\t},\n\n\t// Day of the month with leading zeros\n\tDD: function DD() {\n\t\tvar d = this.date();\n\t\treturn ( d < 10 ? '0' + d : d );\n\t},\n\n\t// The day of the year (starting from 0)\n\tDDD: function DDD() {\n\t\tvar doy = new Date( this.year(), 0, 0 );\n\t\treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t},\n\n\t// The day of the year (starting from 0)\n\t// DDDD: function() {\n\t// \tvar doy = new Date( this.year(), 0, 0 );\n\t// \treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t// },\n\n\t// 24-hour format of an hour without leading zeros\n\th: function h() {\n\t\treturn this.hour();\n\t},\n\n\t// 12-hour format of an hour without leading zeros\n\tH: function H() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : h );\n\t},\n\n\t// 24-hour format of an hour with leading zeros\n\thh: function hh() {\n\t\tvar hh = this.hour();\n\t\treturn ( hh < 10 ? '0' + hh : hh );\n\t},\n\n\t// 12-hour format of an hour with leading zeros\n\tHH: function HH() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : ( h < 10 ? '0' + h : h ) );\n\t},\n\n\tLL: function LL() {\n\t\tvar d = epoch(this.native.getTime());\n\n\t\td.date(1);\n\t\td.month('+1');\n\t\td.date(0);\n\n\t\treturn d.date();\n\t},\n\n\t// Minutes without leading zeros\n\tm: function m() {\n\t\treturn this.min();\n\t},\n\n\t// Minutes with leading zeros\n\tmm: function mm() {\n\t\tvar mm = this.min();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// Numeric representation of a month, without leading zeros\n\tM: function M() {\n\t\treturn this.month();\n\t},\n\n\t// Numeric representation of a month, with leading zeros\n\tMM: function MM() {\n\t\tvar mm = this.month();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// A short textual representation of a month, three letters\n\tMMM: function MMM() {\n\t\t// textual representations should be abstracted into\n\t\t// pluggable language files\n\t\treturn this.lang.mon[ this.month() - 1 ];\n\t},\n\n\t// A full textual representation of a month, such as January or March\n\tMMMM: function MMMM() {\n\t\treturn this.lang.month[ this.month() - 1 ];\n\t},\n\n\t// Seconds, without leading zeros\n\ts: function s() {\n\t\treturn this.sec();\n\t},\n\n\t// Seconds, with leading zeros\n\tss: function ss() {\n\t\tvar ss = this.sec();\n\t\treturn ( ss < 10 ? '0' + ss : ss );\n\t},\n\n\t// Milliseconds\n\tu: function u() {\n\t\treturn this.milli();\n\t},\n\n\t// Unix timestamp\n\tU: function U() {\n\t\treturn Math.round( this.time() / 1000 );\n\t},\n\n\t// ISO-8601 week number of year, weeks starting on Monday\n\tww: function ww() {\n\t\tvar d = new Date( this.year(), 0, 1 );\n\t\td = Math.ceil( ( this.native - d ) / 86400000 );\n\t\td += this.date();\n\t\td -= this.day() + 10;\n\t\treturn Math.floor( d / 7 );\n\t},\n\n\t// A full numeric representation of a year, 4 digits\n\tYYYY: function YYYY() {\n\t\treturn this.year();\n\t},\n\n\t// A two digit representation of a year\n\tYY: function YY() {\n\t\treturn this.year().toString().substr(-2);\n\t},\n\n\t// 4 digit timezone offset with sign, ex: +/-0000\n\tZ: function Z() {\n\t\tvar z = -( this.native.getTimezoneOffset() / .6 );\n\t\tvar sign = ( z >= 0 ? '+' : '-' );\n\t\treturn sign + ( '0000' + Math.abs(z) ).slice(-4);\n\t},\n\n\tZZ: function ZZ() {\n\t\tvar z = this._format.Z.call(this);\n\t\treturn [ z.slice(0,3), z.slice(3,5) ].join(':');\n\t},\n\n\t// 3 letter time zone abbrev\n\tZZZ: function ZZZ() {\n\t\treturn this.native.toString().match(/\\((\\w*)\\)/)[1];\n\t}\n};\n\n\n// unix timestamp\nEpoch.prototype.timestamp = function timestamp() {\n\treturn Math.round( this.time() / 1000 );\n};\n\n\n// true/false if year is leap year\nEpoch.prototype.leap = Epoch.prototype.leapYear = function leap_leapYear() {\n\tvar y = this.year();\n\treturn ( ( y % 4 === 0 ) && ( y % 100 !== 0 ) ) || ( y % 400 === 0 );\n};\n\n\n// 1123 and 2822 are the same format\nEpoch.prototype.rfc2822 = Epoch.prototype.rfc1123 = function rfc1123_rfc2822() {\n\treturn this.native.toUTCString();\n};\n\nEpoch.prototype.rfc8601 = Epoch.prototype.iso8601 = function iso8601() {\n\treturn this.format('YYYY-MM-DD[T]hh:mm:ss[+0000]');\n};\n\n// format accepted by SQL DATE column type\nEpoch.prototype.sqldate = function sqldate() {\n\treturn this.format('YYYY-MM-DD');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqltime = function sqltime() {\n\treturn this.format('hh:mm:ss');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqleod = function sqleod() {\n\treturn this.format('YYYY-MM-DD [23:59:59]');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqlsod = function sqlsod() {\n\treturn this.format('YYYY-MM-DD [00:00:00]');\n};\n\n// format accepted by SQL DATETIME column type\nEpoch.prototype.datetime = function datetime() {\n\treturn this.format('YYYY-MM-DD hh:mm:ss');\n};\n\nEpoch.prototype.fdow = function fdow() {\n\tvar d = this.day();\n\n\tif( d !== 0 ) {\n\t\tthis.date('-' + d);\n\t}\n\n\treturn this;\n};\n\n// return number + ordinal suffix for num\nEpoch.prototype.ordinal = function ordinal( num ) {\n\tif( num >= 11 && num <= 13 )\n\t\tnum += \"th\";\n\n\telse {\n\t\tswitch( num % 10 ) {\n\t\t\tcase 1:  num += \"st\"; break;\n\t\t\tcase 2:  num += \"nd\"; break;\n\t\t\tcase 3:  num += \"rd\"; break;\n\t\t\tdefault: num += \"th\"; break;\n\t\t}\n\t}\n\n\treturn num;\n};\n\n\n/**\n * WRAPPER SECTION *******************************************************\n * here be lizards... changing below this line could break things, careful\n */\n\n\nEpoch.prototype._set = function _set( val, set, get ) {\n\t// if val is a string preceeded by \"+\" or \"-\", parse to int\n\t// (making it positive or negative) and add to current val\n\t// else if val is an int (or stringified int), just set new value\n\tset.call( this.native, ( /(\\+|-)\\d/g.exec( val )\n\t\t? get.call( this.native ) + parseInt( val )\n\t\t: val ) );\n}\n\n\nEpoch.prototype.date = function date( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setDate, this.native.getDate );\n\t}\n\n\treturn this.native.getDate();\n};\n\nEpoch.prototype.hour = function hour( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setHours, this.native.getHours );\n\t}\n\n\treturn this.native.getHours();\n};\n\nEpoch.prototype.min = function min( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMinutes, this.native.getMinutes );\n\t}\n\n\treturn this.native.getMinutes();\n};\n\nEpoch.prototype.sec = function sec( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setSeconds, this.native.getSeconds );\n\t}\n\n\treturn this.native.getSeconds();\n};\n\nEpoch.prototype.milli = function milli( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMilliseconds, this.native.getMilliseconds );\n\t}\n\n\treturn this.native.getMilliseconds();\n};\n\nEpoch.prototype.month = function month( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tif( ! /(\\+|-)/g.exec( val ) )\n\t\t\tval = parseInt(val) - 1;\n\t\tthis._set( val, this.native.setMonth, this.native.getMonth );\n\t}\n\n\t// js returns jan = 0, dec = 11... don't know why\n\t// don't change this, this is the one true way\n\treturn this.native.getMonth() + 1;\n};\n\nEpoch.prototype.year = function year( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setFullYear, this.native.getFullYear );\n\t}\n\n\treturn this.native.getFullYear();\n};\n\nEpoch.prototype.day = function day() {\n\treturn this.native.getDay();\n};\n\nEpoch.prototype.time = function time() {\n\treturn this.native.getTime();\n};\n\n\nEpoch.prototype._lang = {\n\t\"en-us\": {\n\t\tmonth: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t'August', 'September', 'October', 'November', 'December' ],\n\n\t\tmon: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t\t'Oct', 'Nov', 'Dec' ],\n\n\t\tday: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\n\t\t\t'Friday', 'Saturday' ],\n\n\t\td: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\n\t\tfrom: {\n\t\t\tpre: 'in',\n\t\t\tsuf: 'ago',\n\t\t\tminute: 'minute',\n\t\t\thour: 'hour',\n\t\t\tday: 'day',\n\t\t\tmonth: 'month',\n\t\t\tyear: 'year',\n\t\t\tless: 'less than a'\n\t\t}\n\t}\n};\n\n})();\n"],"sourceRoot":"/source/"}