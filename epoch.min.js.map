{"version":3,"sources":["epoch.js"],"names":["epoch","format","lang","Epoch","this","_lang","Date","time","parse","module","exports","window","prototype","str","length","Error","f","_format","self","rx","replace","$0","$1","$2","$3","call","ordinal","date","ret","nat_lang","YYYYMMDDhhmmss","test","m","match","shift","index","input","parseInt","mon","indexOf","charAt","toUpperCase","slice","toLowerCase","from","diff","rel","pre","suf","interval","unit","Math","floor","seconds","abs","year","month","day","hour","minute","less","a","A","d","dd","ddd","dddd","D","DD","DDD","doy","ceil","h","H","hh","HH","LL","getTime","min","mm","M","MM","MMM","MMMM","s","sec","ss","u","milli","U","round","ww","YYYY","YY","toString","substr","Z","z","getTimezoneOffset","sign","ZZ","join","ZZZ","timestamp","leap","leapYear","y","rfc2822","rfc1123","toUTCString","rfc8601","iso8601","sqldate","sqltime","sqleod","sqlsod","datetime","fdow","num","_set","val","set","get","exec","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","setMonth","getMonth","setFullYear","getFullYear","getDay","en-us"],"mappings":"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","file":"epoch.min.js","sourcesContent":["(function() {\n\"use strict\";\n\n// constructor wrapper\nfunction epoch( format, lang ) {\n\tlang = lang || 'en-us';\n\n\treturn new Epoch( format, lang );\n};\n\n\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = epoch;\n}\nelse {\n\twindow.epoch = epoch;\n}\n\n\n// constructor\nfunction Epoch( format, lang ) {\n\tthis.lang = this._lang[lang];\n\n\tif( format instanceof Date ) {\n\t\tthis.native = format;\n\t}\n\telse if( format instanceof Epoch ) {\n\t\tthis.native = new Date( format.time() );\n\t}\n\telse if( format ) {\n\t\tthis.native = this.parse( format );\n\t}\n\telse {\n\t\tthis.native = new Date();\n\t}\n\n}\n\n\n/**\n * Break a format down into componenets and execute their formatting fn\n */\n\nEpoch.prototype.format = function format( str ) {\n\tif( str.length === 0 ) {\n\t\tthrow new Error('No format specified');\n\t}\n\n\tvar f = this._format,\n\t\tself = this,\n\t\t// regex breakdown:\n\t\t// (it's about perfect, so modify with extreme caution)\n\t\t// * looks for text surrounded by brackets \"[]\",\n\t\t// * OR \"|\"\n\t\t// * looks for repeating occurences of a character (or just one),\n\t\t// * possibly followed by one \"o\" (ordinal suffix)\n\t\trx = /\\[([^\\[]*)\\]|(\\w)\\2*(o)?/g;\n\n\t// $0 is format received\n\t// $1 is value of escaped text, undefined if no escaped text was found\n\t// $2 is matched format token (repeated letters that are the same)\n\t// $3 is \"o\" if ordinal suffix is to be used\n\t// return str.replace( rx, ( $0, $1, $2, $3 ) => {\n\treturn str.replace( rx, function( $0, $1, $2, $3 ) {\n\t\tif( typeof $1 === \"undefined\" ) {\n\t\t\tif( typeof f[$0] !== \"function\" && typeof $3 === \"undefined\" ) {\n\t\t\t\tthrow new Error(\"Invalid format: \" + $0);\n\t\t\t}\n\n\t\t\t// check for ordinal suffix in format\n\t\t\t// ($3 would be undefined if $0 was escaped text)\n\t\t\treturn ( typeof $3 === 'undefined'\n\t\t\t\t? f[$0].call(self)\n\t\t\t\t: self.ordinal.call( self, f[$0.replace( \"o\", \"\" )].call(self) )\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn $1 || $0;\n\t\t}\n\t} );\n};\n\n\n/**\n * Attempt to accept unpredictable date formats and make them parsable\n */\n\nEpoch.prototype.parse = function parse( date ) {\n\t// natural language date formats (several variations)\n\tvar nat_lang = /\\b(?:(?:(?:mon)|(?:tues?)|(?:wed(?:nes)?)|(?:thur?s?)|(?:fri)|(?:sat(?:ur)?)|(?:sun))(?:day)?\\b[:\\-,]?\\s*)?((?:jan|feb)?r?(?:uary)?|mar(?:ch)?|apr(?:il)?|may|june?|july?|aug(?:ust)?|oct(?:ober)?|(?:sept?|nov|dec)(?:ember)?)\\s+(\\d{1,2})(?:st|rd|th)?\\s*,?\\s*(\\d{4})(?:\\s*(\\d{1,2})[.:](\\d{2})[.:](\\d{2}))?/i;\n\n\t// standard YYYY-MM-DD (optional hh:mm:ss) format, with common separators\n\tvar ret;\n\tvar YYYYMMDDhhmmss = /^(\\d{4})[.,-_](\\d{2})[.,-_](\\d{2})(?:\\s*(\\d{2})[.:](\\d{2})[.:](\\d{2}))?$/;\n\tif ( YYYYMMDDhhmmss.test( date ) ) {\n\t\tvar m = date.match(YYYYMMDDhhmmss);\n\t\tm.shift();\n\t\tdelete m.index;\n\t\tdelete m.input;\n\t\tret = new Date(m[0], parseInt(m[1]) - 1, m[2], ( m[3] || 0), (m[4] || 0), (m[5] || 0) );\n\t}\n\n\telse if( nat_lang.test(date) ) {\n\t\tvar m = date.match(nat_lang);\n\t\tm.shift();\n\t\tdelete m.index;\n\t\tdelete m.input;\n\n\t\tm[0] = this.lang.mon.indexOf(m[0].charAt(0).toUpperCase() + m[0].slice(1,3).toLowerCase());\n\t\tret = new Date(m[2], m[0], m[1], ( m[3] || 0), (m[4] || 0), (m[5] || 0) );\t\n\t}\n\n\telse {\n\t\tret = new Date(date);\n\t}\n\n\treturn ret;\n};\n\n\nEpoch.prototype.from = Epoch.prototype.diff = function from( date, rel ) {\n\trel = rel || { pre: this.lang.from.pre, suf: this.lang.from.suf };\n\tdate = ( date ? new Date( this.parse( date ) ) : new Date() );\n\n\tvar interval = '',\n\t\tunit = '',\n\t\tdiff = Math.floor( ( date - this.native ) / 1000 ),\n\t\tseconds = Math.abs( diff );\n\n\tif( seconds >= 31536000 || Math.floor( seconds / 2592000 ) === 12 ) {\n\t\tinterval = Math.floor( seconds / 31536000 ) || 1;\n\t\tunit = this.lang.from.year;\n\t}\n\n\t// just average it out to 30 days\n\telse if( seconds >= 2592000 ) {\n\t\tinterval = Math.floor( seconds / 2592000 );\n\t\tunit = this.lang.from.month;\n\t}\n\n\telse if( seconds >= 86400 ) {\n\t\tinterval = Math.floor( seconds / 86400 );\n\t\tunit = this.lang.from.day;\n\t}\n\n\telse if( seconds >= 3600 ) {\n\t\tinterval = Math.floor( seconds / 3600 );\n\t\tunit = this.lang.from.hour;\n\t}\n\n\telse if( seconds >= 60 ) {\n\t\tinterval = Math.floor( seconds / 60 );\n\t\tunit = this.lang.from.minute;\n\t}\n\n\telse {\n\t\tinterval = this.lang.from.less;\n\t\tunit = this.lang.from.minute;\n\t}\n\n\t// singulural\n\tif( typeof interval === 'number' && interval > 1 )\n\t\tunit += 's'\n\n\tinterval = interval + ' ' + unit;\n\n\treturn ( diff > 0 ? rel.pre + ' ' + interval : interval + ' ' + rel.suf );\n};\n\n\n// collection of functions to return date formats\nEpoch.prototype._format = {\n\n\t// Lowercase am/pm\n\ta: function a() {\n\t\treturn ( this.hour() > 11 ? 'pm' : 'am' );\n\t},\n\n\t// Uppercase AM/PM\n\tA: function A() {\n\t\treturn ( this.hour() > 11 ? 'PM' : 'AM' );\n\t},\n\n\t// Numeric representation of the day of the week, 0 - 6 : Sun - Sat\n\td: function d() {\n\t\treturn this.day();\n\t},\n\n\t// Numeric representation of the day of the week, 1 - 7 : Sun - Sat\n\tdd: function dd() {\n\t\treturn this.day() + 1;\n\t},\n\n\t// A textual representation of a day, three letters\n\tddd: function ddd() {\n\t\treturn this.lang.d[ this.day() ];\n\t},\n\n\t// A full textual representation of the day of the week\n\tdddd: function dddd() {\n\t\treturn this.lang.day[ this.day() ]\n\t},\n\n\t// Day of the month without leading zeros\n\tD: function D() {\n\t\treturn this.date();\n\t},\n\n\t// Day of the month with leading zeros\n\tDD: function DD() {\n\t\tvar d = this.date();\n\t\treturn ( d < 10 ? '0' + d : d );\n\t},\n\n\t// The day of the year (starting from 0)\n\tDDD: function DDD() {\n\t\tvar doy = new Date( this.year(), 0, 0 );\n\t\treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t},\n\n\t// The day of the year (starting from 0)\n\t// DDDD: function() {\n\t// \tvar doy = new Date( this.year(), 0, 0 );\n\t// \treturn Math.ceil( ( this.native - doy ) / 86400000 );\n\t// },\n\n\t// 24-hour format of an hour without leading zeros\n\th: function h() {\n\t\treturn this.hour();\n\t},\n\n\t// 12-hour format of an hour without leading zeros\n\tH: function H() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : h );\n\t},\n\n\t// 24-hour format of an hour with leading zeros\n\thh: function hh() {\n\t\tvar hh = this.hour();\n\t\treturn ( hh < 10 ? '0' + hh : hh );\n\t},\n\n\t// 12-hour format of an hour with leading zeros\n\tHH: function HH() {\n\t\tvar h = this.hour();\n\t\treturn ( h > 12 ? h -= 12 : ( h < 10 ? '0' + h : h ) );\n\t},\n\n\tLL: function LL() {\n\t\tvar d = epoch(this.native.getTime());\n\n\t\td.date(1);\n\t\td.month('+1');\n\t\td.date(0);\n\n\t\treturn d.date();\n\t},\n\n\t// Minutes without leading zeros\n\tm: function m() {\n\t\treturn this.min();\n\t},\n\n\t// Minutes with leading zeros\n\tmm: function mm() {\n\t\tvar mm = this.min();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// Numeric representation of a month, without leading zeros\n\tM: function M() {\n\t\treturn this.month();\n\t},\n\n\t// Numeric representation of a month, with leading zeros\n\tMM: function MM() {\n\t\tvar mm = this.month();\n\t\treturn ( mm < 10 ? '0' + mm : mm );\n\t},\n\n\t// A short textual representation of a month, three letters\n\tMMM: function MMM() {\n\t\t// textual representations should be abstracted into\n\t\t// pluggable language files\n\t\treturn this.lang.mon[ this.month() - 1 ];\n\t},\n\n\t// A full textual representation of a month, such as January or March\n\tMMMM: function MMMM() {\n\t\treturn this.lang.month[ this.month() - 1 ];\n\t},\n\n\t// Seconds, without leading zeros\n\ts: function s() {\n\t\treturn this.sec();\n\t},\n\n\t// Seconds, with leading zeros\n\tss: function ss() {\n\t\tvar ss = this.sec();\n\t\treturn ( ss < 10 ? '0' + ss : ss );\n\t},\n\n\t// Milliseconds\n\tu: function u() {\n\t\treturn this.milli();\n\t},\n\n\t// Unix timestamp\n\tU: function U() {\n\t\treturn Math.round( this.time() / 1000 );\n\t},\n\n\t// ISO-8601 week number of year, weeks starting on Monday\n\tww: function ww() {\n\t\tvar d = new Date( this.year(), 0, 1 );\n\t\td = Math.ceil( ( this.native - d ) / 86400000 );\n\t\td += this.date();\n\t\td -= this.day() + 10;\n\t\treturn Math.floor( d / 7 );\n\t},\n\n\t// A full numeric representation of a year, 4 digits\n\tYYYY: function YYYY() {\n\t\treturn this.year();\n\t},\n\n\t// A two digit representation of a year\n\tYY: function YY() {\n\t\treturn this.year().toString().substr(-2);\n\t},\n\n\t// 4 digit timezone offset with sign, ex: +/-0000\n\tZ: function Z() {\n\t\tvar z = -( this.native.getTimezoneOffset() / .6 );\n\t\tvar sign = ( z >= 0 ? '+' : '-' );\n\t\treturn sign + ( '0000' + Math.abs(z) ).slice(-4);\n\t},\n\n\tZZ: function ZZ() {\n\t\tvar z = this._format.Z.call(this);\n\t\treturn [ z.slice(0,3), z.slice(3,5) ].join(':');\n\t},\n\n\t// 3 letter time zone abbrev\n\tZZZ: function ZZZ() {\n\t\treturn this.native.toString().match(/\\((\\w*)\\)/)[1];\n\t}\n};\n\n\n// unix timestamp\nEpoch.prototype.timestamp = function timestamp() {\n\treturn Math.round( this.time() / 1000 );\n};\n\n\n// true/false if year is leap year\nEpoch.prototype.leap = Epoch.prototype.leapYear = function leap_leapYear() {\n\tvar y = this.year();\n\treturn ( ( y % 4 === 0 ) && ( y % 100 !== 0 ) ) || ( y % 400 === 0 );\n};\n\n\n// 1123 and 2822 are the same format\nEpoch.prototype.rfc2822 = Epoch.prototype.rfc1123 = function rfc1123_rfc2822() {\n\treturn this.native.toUTCString();\n};\n\nEpoch.prototype.rfc8601 = Epoch.prototype.iso8601 = function iso8601() {\n\treturn this.format('YYYY-MM-DD[T]hh:mm:ss[+0000]');\n};\n\n// format accepted by SQL DATE column type\nEpoch.prototype.sqldate = function sqldate() {\n\treturn this.format('YYYY-MM-DD');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqltime = function sqltime() {\n\treturn this.format('hh:mm:ss');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqleod = function sqleod() {\n\treturn this.format('YYYY-MM-DD [23:59:59]');\n};\n\n// format accepted by SQL TIME column type\nEpoch.prototype.sqlsod = function sqlsod() {\n\treturn this.format('YYYY-MM-DD [00:00:00]');\n};\n\n// format accepted by SQL DATETIME column type\nEpoch.prototype.datetime = function datetime() {\n\treturn this.format('YYYY-MM-DD hh:mm:ss');\n};\n\nEpoch.prototype.fdow = function fdow() {\n\tvar d = this.day();\n\n\tif( d !== 0 ) {\n\t\tthis.date('-' + d);\n\t}\n\n\treturn this;\n};\n\n// return number + ordinal suffix for num\nEpoch.prototype.ordinal = function ordinal( num ) {\n\tif( num >= 11 && num <= 13 )\n\t\tnum += \"th\";\n\n\telse {\n\t\tswitch( num % 10 ) {\n\t\t\tcase 1:  num += \"st\"; break;\n\t\t\tcase 2:  num += \"nd\"; break;\n\t\t\tcase 3:  num += \"rd\"; break;\n\t\t\tdefault: num += \"th\"; break;\n\t\t}\n\t}\n\n\treturn num;\n};\n\n\n/**\n * WRAPPER SECTION *******************************************************\n * here be lizards... changing below this line could break things, careful\n */\n\n\nEpoch.prototype._set = function _set( val, set, get ) {\n\t// if val is a string preceeded by \"+\" or \"-\", parse to int\n\t// (making it positive or negative) and add to current val\n\t// else if val is an int (or stringified int), just set new value\n\tset.call( this.native, ( /(\\+|-)\\d/g.exec( val )\n\t\t? get.call( this.native ) + parseInt( val )\n\t\t: val ) );\n}\n\n\nEpoch.prototype.date = function date( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setDate, this.native.getDate );\n\t}\n\n\treturn this.native.getDate();\n};\n\nEpoch.prototype.hour = function hour( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setHours, this.native.getHours );\n\t}\n\n\treturn this.native.getHours();\n};\n\nEpoch.prototype.min = function min( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMinutes, this.native.getMinutes );\n\t}\n\n\treturn this.native.getMinutes();\n};\n\nEpoch.prototype.sec = function sec( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setSeconds, this.native.getSeconds );\n\t}\n\n\treturn this.native.getSeconds();\n};\n\nEpoch.prototype.milli = function milli( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setMilliseconds, this.native.getMilliseconds );\n\t}\n\n\treturn this.native.getMilliseconds();\n};\n\nEpoch.prototype.month = function month( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tif( ! /(\\+|-)/g.exec( val ) )\n\t\t\tval = parseInt(val) - 1;\n\t\tthis._set( val, this.native.setMonth, this.native.getMonth );\n\t}\n\n\t// js returns jan = 0, dec = 11... don't know why\n\t// don't change this, this is the one true way\n\treturn this.native.getMonth() + 1;\n};\n\nEpoch.prototype.year = function year( val ) {\n\tif( typeof val !== 'undefined' ) {\n\t\tthis._set( val, this.native.setFullYear, this.native.getFullYear );\n\t}\n\n\treturn this.native.getFullYear();\n};\n\nEpoch.prototype.day = function day() {\n\treturn this.native.getDay();\n};\n\nEpoch.prototype.time = function time() {\n\treturn this.native.getTime();\n};\n\n\nEpoch.prototype._lang = {\n\t\"en-us\": {\n\t\tmonth: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t'August', 'September', 'October', 'November', 'December' ],\n\n\t\tmon: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t\t'Oct', 'Nov', 'Dec' ],\n\n\t\tday: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\n\t\t\t'Friday', 'Saturday' ],\n\n\t\td: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\n\t\tfrom: {\n\t\t\tpre: 'in',\n\t\t\tsuf: 'ago',\n\t\t\tminute: 'minute',\n\t\t\thour: 'hour',\n\t\t\tday: 'day',\n\t\t\tmonth: 'month',\n\t\t\tyear: 'year',\n\t\t\tless: 'less than a'\n\t\t}\n\t}\n};\n\n})();\n"],"sourceRoot":"/source/"}